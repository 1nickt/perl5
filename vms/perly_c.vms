/* Postprocessed by vms_yfix.pl 1.11 to add VMS declarations of globals */
#ifndef lint
/* static char yysccsid[] = "@(#)yaccpar 1.8 (Berkeley) 01/20/91"; */
#endif
#define YYBYACC 1
#line 25 "perly.y"
#include "EXTERN.h"
#define PERL_IN_PERLY_C
#include "perl.h"
#ifdef EBCDIC
#undef YYDEBUG
#endif
#define dep() deprecate_old("\"do\" to call subroutines")

/* stuff included here to make perly_c.diff apply better */

#define yydebug	    PL_yydebug
#define yynerrs	    PL_yynerrs
#define yyerrflag   PL_yyerrflag
#define yychar	    PL_yychar
#define yyval	    PL_yyval
#define yylval	    PL_yylval

struct ysv {
    short* yyss;
    YYSTYPE* yyvs;
    int oldyydebug;
    int oldyynerrs;
    int oldyyerrflag;
    int oldyychar;
    YYSTYPE oldyyval;
    YYSTYPE oldyylval;
};

static void yydestruct(pTHX_ void *ptr);

#line 60 "perly.y"
#if 0 /* get this from perly.h instead */
#line 63 "perly.y"
typedef union {
    I32	ival;
    char *pval;
    OP *opval;
    GV *gvval;
} YYSTYPE;
#line 71 "perly.y"
#endif /* 0 */

#ifdef USE_PURE_BISON
#define YYLEX_PARAM (&yychar)
#define yylex yylex_r
#endif

#line 54 "perly.c"
#define YYERRCODE 256
static short yylhs[] = {                                        -1,
    0,   10,    8,    7,   11,    9,   12,   12,   12,   13,
   13,   13,   13,   26,   26,   26,   26,   26,   26,   26,
   16,   16,   16,   15,   15,   43,   43,   14,   14,   14,
   14,   14,   14,   14,    6,   28,   28,   29,   29,   30,
   31,   32,   33,   54,   54,    1,    1,    1,    1,    1,
    2,   39,   39,   47,   55,    3,    4,    5,   40,   41,
   41,   45,   45,   45,   46,   46,   42,   42,   56,   56,
   58,   57,   17,   17,   17,   17,   27,   27,   27,   37,
   37,   37,   37,   37,   37,   37,   37,   59,   37,   38,
   38,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   51,   51,   51,   51,
   51,   51,   51,   51,   52,   52,   52,   52,   52,   53,
   53,   53,   53,   53,   53,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   48,   48,
   49,   49,   49,   49,   49,   34,   34,   35,   35,   35,
   44,   25,   20,   21,   22,   23,   24,   36,   36,   36,
   36,
};
static short yylen[] = {                                         2,
    2,    4,    0,    0,    4,    0,    0,    2,    2,    2,
    1,    2,    3,    1,    1,    3,    3,    3,    3,    3,
    0,    2,    6,    7,    7,    0,    2,    9,    9,   10,
    9,    8,   12,    3,    0,    0,    1,    0,    1,    1,
    1,    1,    1,    0,    1,    1,    1,    1,    1,    1,
    4,    1,    0,    6,    6,    0,    0,    0,    1,    0,
    1,    0,    2,    1,    2,    1,    1,    1,    3,    2,
    0,    7,    3,    3,    3,    1,    2,    3,    1,    3,
    5,    6,    3,    3,    5,    2,    4,    0,    5,    1,
    1,    5,    4,    5,    4,    5,    6,    5,    4,    5,
    4,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    2,    2,    2,    2,
    2,    2,    2,    2,    3,    2,    4,    3,    5,    2,
    2,    4,    5,    4,    5,    1,    1,    1,    1,    5,
    2,    1,    2,    3,    2,    1,    1,    1,    1,    1,
    1,    6,    5,    4,    5,    1,    1,    3,    4,    3,
    1,    2,    2,    1,    2,    2,    1,    2,    2,    1,
    3,    1,    3,    4,    4,    6,    1,    1,    3,    2,
    3,    2,    1,    1,    1,    0,    1,    0,    1,    2,
    1,    2,    2,    2,    2,    2,    2,    1,    1,    1,
    1,
};
static short yydefred[] = {                                      4,
    0,    7,    0,   45,   58,   56,    0,   56,   56,    8,
   46,    9,   11,   48,    0,   47,   49,   50,    0,    0,
    0,   70,   71,    0,   14,    3,  177,    0,    0,  156,
    0,  172,    0,   57,   57,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   12,    0,    0,    0,    0,    0,    0,    0,
   10,    0,    0,    0,    0,    0,  148,  150,    0,    0,
    0,    0,  178,  142,  136,  137,  138,  139,   52,    0,
   59,    0,   69,    0,    0,    7,  198,  201,  200,  199,
    0,    0,    0,    0,    0,    0,    3,    3,    3,    3,
    3,    3,    0,    0,    0,    0,    0,  165,    0,    0,
    0,    0,   86,    0,  196,    0,  131,    0,    0,    0,
    0,    0,    0,    0,  183,  185,  184,    0,    0,  192,
    0,    0,    0,    0,    0,    0,    0,    0,  126,    0,
    0,    0,  193,  194,  195,  197,    0,   34,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  121,  122,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   13,    0,   51,   61,    0,    0,    0,
    0,   84,    0,    0,   88,    0,    0,    0,    0,    0,
    0,    0,    3,  171,  173,    0,    0,    0,    0,    0,
    0,    0,  128,    0,  160,  182,    0,    0,  179,    0,
    0,  125,   27,    0,    0,   19,    0,    0,    0,    0,
    0,   73,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,    0,
    0,   91,    0,    0,  102,    0,    0,    0,    0,    0,
    0,    0,  158,    0,    0,    0,    0,    0,    0,    2,
    0,    0,  175,    0,    0,    0,    0,    0,    0,    0,
   43,    0,  191,    0,    0,   37,   42,    0,    0,    0,
  174,  190,   87,    0,  132,    0,  134,    0,  127,  181,
   65,    0,    0,    0,    0,   99,    0,    0,    0,    0,
  101,   95,    0,   93,    0,  154,    0,  159,   63,   68,
   67,   55,    0,   54,   85,    0,   89,  129,   35,   35,
    0,    0,    0,    0,    0,    0,   81,  133,  135,  153,
    0,    0,    0,  100,   94,    0,   98,   96,  155,   92,
   72,  176,    0,    0,    6,    0,    0,    0,    0,    0,
    0,  152,   97,   82,    0,    0,    7,    0,    0,   24,
   25,    0,   32,   35,    0,   28,   29,    0,   22,    0,
    0,    0,   31,    5,    0,   30,    0,    0,    0,    0,
   33,   23,
};
static short yydgoto[] = {                                       1,
   10,   11,   20,  105,   19,  363,    2,   96,  377,   99,
  366,    3,   12,   13,   71,  380,  289,   73,   74,   75,
   76,   77,   78,   79,   80,  296,   82,  297,  287,  236,
  290,  299,  292,  123,  218,  101,   83,  263,   90,   92,
  198,  332,  158,  294,  277,  229,   14,   84,  138,   85,
   86,   87,   88,   15,   16,   17,   18,   94,  284,
};
static short yysindex[] = {                                      0,
    0,    0, -228,    0,    0,    0,  -56,    0,    0,    0,
    0,    0,    0,    0,  796,    0,    0,    0, -230, -225,
   24,    0,    0, -225,    0,    0,    0,  172,  172,    0,
    1,    0, 1939,    0,    0,   47,   55,   60,   80,  -26,
 1939,   90,   91,   95,  981,  920,  172, 1129, 1190, -213,
 1939,   34, 1939,  172, 1939, 1939, 1939, 1939, 1939, 1939,
 1251, 1312,    0, 1939, 1939,  172,  172,  172,  172, -185,
    0, 1032,  619,  -19,  -65,  -58,    0,    0,   14,  112,
   98,  110,    0,    0,    0,    0,    0,    0,    0,   35,
    0,  -97,    0,  -78,  -97,    0,    0,    0,    0,    0,
 1939,  140, 1939,  298,   35,  -97,    0,    0,    0,    0,
    0,    0,  146,  619,  149, 1399,  920,    0,  298,    0,
  -65,  110,    0, 1939,    0,  156,    0,  298,  -16,   73,
  -54, 1939,  298, 1460,    0,    0,    0, -100,  298,    0,
  110, -194, -194, -194, -118, -118,  109,  -40,    0,  -85,
 -194, -194,    0,    0,    0,    0,   35,    0, 1939, 1939,
 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939,
 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939, 1939,
 1939,    0,    0,  -18, 1939, 1521, 1939, 1939, 1939, 1939,
 1939, 1939, 1582,    0, 1939,    0,    0,  -94,  -48,  -94,
  307,    0, 1939,  150,    0,  -94, 1939, 1939, 1939, 1939,
  174, 1669,    0,    0,    0,  -37,   48,  171, 1939,  110,
 1730, 1791,    0,   99,    0,    0,  -34,   -9,    0, 1939,
  129,    0,    0, -134, -134,    0, -134, -134, -134,  -80,
  -80,    0, 1012,  298,  720,  374,  879,  619,  274, 1050,
 1050, 3867, 2149, 1779, 1324, -194, -194, 1939,    0, 1852,
 1939,    0,  201,  -44,    0,    4,  151,   94,  229,  100,
  305,  103,    0,   15,  619,   -8,  -46, 1939,  -46,    0,
  213, 1939,    0, 1939,   35, -134,  214,  219, -134,  238,
    0,  253,    0,  279, 1032,    0,    0,  294,  261, 1939,
    0,    0,    0,   23,    0,   26,    0,   41,    0,    0,
    0,  325, 1939, 1939,  106,    0,   44,  348, 1939,  211,
    0,    0,  216,    0,  223,    0,  233,    0,    0,    0,
    0,    0,  280,    0,    0,  209,    0,    0,    0,    0,
  215,  215, 1939,  215, 1939,  332,    0,    0,    0,    0,
  382,  680,  249,    0,    0,  343,    0,    0,    0,    0,
    0,    0,  215,  215,    0, -241, -241,  344, -185,  327,
  215,    0,    0,    0, -185, -185,    0,  215,  359,    0,
    0,  215,    0,    0, -185,    0,    0,  596,    0, 1939,
 -185, 1669,    0,    0,  370,    0,  373,  215,  215, -241,
    0,    0,
};
static short yyrindex[] = {                                      0,
    0,    0,  383,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  292,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1999, 2060,    0,    0, 2113, 2200,    0,    0,    0,    0,
    0,    0, 2296,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   17,
    0,  -11,  579, 2349, 2399, 2472,    0,    0, 2532, 2590,
    0,  824,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -57,    0,    0,  -57,    0,    0,    0,    0,    0,
 2200,    0,    0, 3948,    0, -114,    0,    0,    0,    0,
    0,    0,    0, 3466,    0,    0,  376,    0, 3998,  444,
  508, 3066,    0,    0,    0, 2640,    0, 4060, 2399,    0,
    0, 2200, 4106,    0,    0,    0,    0, 2708, 4167,    0,
 3116, 3352, 3415, 3476, 3240, 3307, 2768,    0,    0,    0,
 3543, 3588,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2831,    0,    0,  -43,    0,  -43,
  859,    0,  376,    0,    0,  299,  386,    0,    0,    0,
    0,  365,    0,    0,    0,    0,  389,    0,    0, 3179,
    0,    0,    0,    0,    0,    0,    0, 2881,    0,    0,
 2944,    0,    0,  -10,   27,    0,   38,   53,   69, 1915,
 2253,    0, 4504, 4224, 4234, 3779, 3824, 3641,    0, 4386,
 4423, 4342, 4332, 4279, 3887, 3651, 3712,    0,    0,    0,
    0,    0, 3004,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3702,  -39,    0,  377,    0,    0,
    0,    0,    0, 2200,    0,  123,    0,    0,  392,    0,
    0,    0,    0,    0,  125,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  376,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  385,    0,    0,    0,    0,    0,
    0,  571,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   96,   96,    0,   17,    0,
    0,    0,    0,    0,   17,   17,    0,    0,    0,    0,
    0,    0,    0,    0,   17,    0,    0,  859,    0,    0,
   17,  394,    0,    0,    0,    0,    0,    0,    0,   96,
    0,    0,
};
static short yygindex[] = {                                      0,
    0,    0,   43,  411,    0, -321,    0,  803,    0,  166,
  630,  -84,    0,    0,    0, -339,  -15,   58,    0, 2512,
  396,  397,    0,    0,    0,  435,  501,    0,  118, -120,
 -187,   72,    0,  -95, -192, 1141,    0,    0,    0,  442,
  -17,  188,  673,    0, -177,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
#define YYTABLESIZE 4809
static short yytable[] = {                                      72,
  231,   60,   22,  301,  224,  202,  310,  232,   60,   66,
  281,  201,  330,  112,  320,   62,   26,   66,  364,   64,
  186,  260,  279,  222,  298,  189,   89,  381,  285,   15,
   18,   91,  191,  131,  378,  379,  225,    4,    5,    6,
  103,    7,    8,  132,  321,  148,  150,   15,   18,   26,
   23,   24,   26,   26,   26,  328,   26,  188,   26,   26,
  402,   26,  392,  347,  190,   60,  348,   40,    9,   66,
   68,  187,  261,  134,  189,   26,   26,  200,   16,   62,
   26,  349,   93,   64,  354,   40,  107,  288,  206,  291,
  104,  302,  157,   17,  108,   21,   16,   67,  114,  109,
  216,  217,  119,  185,  258,  128,  188,   26,  133,   20,
  139,   17,  346,  142,  143,  144,  145,  146,  227,  110,
  181,  151,  152,  182,  183,  184,  356,   20,   21,  115,
  116,   21,   21,   21,  117,   21,  192,   21,   21,   26,
   21,   26,   26,  234,  235,  237,  238,  239,  240,  241,
  242,  193,  323,  195,   21,  368,  194,   26,  325,   21,
  204,  327,  197,   39,  353,   41,  164,  165,  166,  264,
  266,  267,  268,  269,  270,  271,  272,  274,  199,  203,
   70,   39,  333,   15,   60,  213,   21,  217,  337,  214,
  283,  286,  235,  282,  235,  221,  295,  223,  228,  230,
   21,  184,  395,  304,  276,  306,  308,   66,  278,   66,
  118,  303,  173,  127,  312,  164,  165,  166,   21,  313,
   21,   21,  166,  309,  243,  244,  245,  246,  247,  248,
  249,  250,  251,  252,  253,  254,  255,  256,  257,  259,
  319,   60,  315,  322,  317,  318,  164,  165,  166,  362,
  311,  329,  275,  335,  339,  196,  164,  165,  166,  340,
  164,  165,  166,  164,  165,  166,  164,  165,  166,  111,
  205,  173,   26,   26,   26,   26,   26,   26,  341,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,  388,  342,   26,   26,   26,  351,   26,   26,
   26,   26,   26,  217,  164,  165,  166,   26,   26,   26,
   26,   26,   26,   26,   26,  164,  165,  166,  343,  345,
   26,  324,  233,  164,  165,  166,  164,  165,  166,  286,
   26,  314,   26,   26,  344,  357,  173,  365,  361,  336,
  358,  164,  165,  166,  164,  165,  166,  359,  164,  165,
  166,   21,   21,   21,   21,   21,   21,  360,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,  352,  371,  373,   21,   21,   72,   21,   21,   21,
   21,   21,    1,  374,  382,  384,   21,   21,   21,   21,
   21,   21,   21,   21,  164,  165,  166,  326,  390,   21,
  164,  165,  166,  164,  165,  166,  164,  165,  166,   21,
  398,   21,   21,  399,   53,   44,  188,  350,   44,   44,
   44,   62,   44,   36,   44,   44,   38,   44,   97,  189,
  167,  280,   41,   98,   36,  186,  168,  169,  170,  171,
  355,   44,  331,   38,  331,  106,   44,  136,  137,   81,
  338,  164,  165,  166,  172,  174,  175,  176,  177,  178,
  179,  180,  370,  397,  181,   95,  334,  182,  183,  184,
    0,    0,    0,   44,  372,    0,  198,    0,    0,  198,
  198,  198,    0,  198,  177,  198,  198,  177,  198,  167,
    0,    0,    0,    0,    0,  168,  169,  170,  171,    0,
    0,  177,  177,    0,    0,   44,  177,  198,   44,    0,
    0,    0,    0,  172,  174,  175,  176,  177,  178,  179,
  180,    0,    0,  181,    0,    0,  182,  183,  184,  164,
  165,  166,    0,    0,  198,    0,  177,    0,    0,    0,
  199,    0,    0,  199,  199,  199,  122,  199,  146,  199,
  199,  146,  199,    0,  167,  141,    0,    0,    0,    0,
  168,  169,  170,  171,    0,  146,  146,    0,    0,  198,
  146,  199,    4,    5,    6,    0,    7,    8,  172,  174,
  175,  176,  177,  178,  179,  180,  170,  171,  181,    0,
    0,  182,  183,  184,    0,    0,    0,    0,    0,    0,
  146,  122,    0,    9,    0,  164,  165,  166,  179,  180,
    0,  140,  181,    0,  140,  182,  183,  184,    0,   79,
    0,    0,   79,    0,  220,  164,  165,  166,  140,  140,
    0,    0,  122,  199,    0,    0,   79,   79,   44,   44,
   44,   44,   44,   44,    0,   44,   44,   44,  164,  165,
  166,   44,    0,    0,   44,   44,   44,   44,    0,    0,
    0,   44,   44,  140,   44,   44,   44,   44,   44,    0,
    0,   79,    0,   44,   44,   44,   44,   44,   44,    0,
   44,  173,  164,  165,  166,  180,   44,    0,  181,    0,
    0,  182,  183,  184,    0,    0,   44,    0,   44,   44,
  198,  198,  198,  198,  198,    0,  198,  198,  198,    0,
    0,    0,  198,    0,    0,  177,  177,  177,  177,    0,
  394,    0,  177,  198,  177,  198,  198,  198,  198,  198,
  177,  177,  177,  177,  198,  198,  198,  198,  198,  198,
    0,  198,  173,    0,  177,  177,  177,  198,  177,  177,
  177,  177,  177,  177,  177,  177,    0,  198,  177,  198,
  198,  177,  177,  177,  199,  199,  199,  199,  199,    0,
  199,  199,  199,    0,    0,    0,  199,    0,  122,  146,
  146,  146,  146,    0,  122,    0,  146,  199,  146,  199,
  199,  199,  199,  199,  146,  146,  146,  146,  199,  199,
  199,  199,  199,  199,    0,  199,    0,    0,  146,  146,
  146,  199,  146,  146,  146,  146,  146,  146,  146,  146,
    0,  199,  146,  199,  199,  146,  146,  146,   56,    0,
    0,   66,   68,   54,    0,   61,    0,   69,   65,    0,
   64,    0,  140,  140,  140,  140,    0,    0,    0,  140,
   79,   79,   79,   79,   63,    0,    0,   79,    0,   67,
    0,    4,    5,    6,   76,    7,    8,    0,    0,    0,
    0,  140,  140,  140,    0,  140,    0,    0,    0,   79,
   79,   79,   76,    0,    0,    0,   62,    0,    0,    0,
    0,   44,    9,    0,   44,   44,   44,    0,   44,  167,
   44,   44,    0,   44,    0,  168,  169,  170,  171,  207,
  208,  209,  210,  211,  212,    0,   76,   44,   26,    0,
    0,   57,   44,  172,  174,  175,  176,  177,  178,  179,
  180,    0,    0,  181,    0,    0,  182,  183,  184,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   44,
    0,    0,   56,    0,    0,   66,   68,   54,    0,   61,
  167,   69,   65,    0,   64,    0,  168,  169,  170,  171,
    0,  367,    0,  369,    0,    0,    0,    0,    0,    0,
    0,   44,    0,   67,   44,  174,  175,  176,  177,  178,
  179,  180,  375,  376,  181,    0,    0,  182,  183,  184,
  385,    0,    0,    0,    0,    0,  168,  389,  170,  171,
   62,  391,    0,   56,    0,  300,   66,   68,   54,    0,
   61,    0,   69,   65,    0,   64,    0,  400,  401,    0,
  179,  180,    0,    0,  181,    0,    0,  182,  183,  184,
    0,  383,   26,    0,   67,   57,    0,  386,  387,    0,
    0,   25,   27,   28,   29,   30,   31,  393,   32,   33,
   34,    0,    0,  396,   35,    0,    0,   36,   37,   38,
   39,   62,    0,    0,   40,   41,    0,   42,   43,   44,
   45,   46,    0,    0,    0,    0,   47,   48,   49,   50,
   51,   52,    0,   53,    0,   76,   76,   76,   76,   55,
    0,    0,   76,   26,    0,    0,   57,    0,    0,   58,
    0,   59,   60,    0,   44,   44,   44,   44,   44,   44,
    0,   44,   44,   44,   76,   76,   76,   44,    0,    0,
   44,   44,   44,   44,    0,    0,    0,   44,   44,    0,
   44,   44,   44,   44,   44,    0,    0,    0,    0,   44,
   44,   44,   44,   44,   44,    0,   44,    0,    0,    0,
    0,   56,   44,    0,   66,   68,   54,  170,   61,  102,
   69,   65,   44,   64,   44,   44,  120,   28,   29,   30,
   31,   98,   32,   33,   34,    0,  124,  125,   35,    0,
  180,    0,   67,  181,  140,    0,  182,  183,  184,   41,
    0,   42,   43,   44,   45,   46,  153,  154,  155,  156,
   47,   48,   49,   50,   51,   52,    0,   53,    0,   62,
    0,    0,   56,   55,    0,   66,   68,   54,    0,   61,
    0,   69,   65,   58,   64,   59,   60,   27,   28,   29,
   30,   31,    0,   32,   33,   34,    0,    0,  130,   35,
    0,   26,    0,   67,   57,    0,    0,  219,    0,    0,
   41,    0,   42,   43,   44,   45,   46,    0,    0,    0,
    0,   47,   48,   49,   50,   51,   52,    0,   53,    0,
   62,    0,    0,   56,   55,    0,   66,   68,   54,    0,
   61,  147,   69,   65,   58,   64,   59,   60,  168,  169,
  170,  171,    0,  159,  160,  161,  162,    0,    0,    0,
  163,    0,    0,    0,   67,   57,    0,  174,  175,  176,
  177,  178,  179,  180,    0,    0,  181,    0,    0,  182,
  183,  184,  164,  165,  166,    0,  168,  169,  170,  171,
    0,   62,    0,    0,   56,    0,    0,   66,   68,   54,
    0,   61,    0,   69,   65,    0,   64,  176,  177,  178,
  179,  180,    0,    0,  181,    0,    0,  182,  183,  184,
    0,    0,    0,    0,    0,   67,   57,    0,    0,    0,
    0,    0,    0,    0,    0,  126,   28,   29,   30,   31,
    0,   32,   33,   34,    0,    0,    0,   35,    0,    0,
    0,    0,   62,    0,  149,    0,    0,    0,   41,    0,
   42,   43,   44,   45,   46,    0,    0,    0,    0,   47,
   48,   49,   50,   51,   52,    0,   53,    0,    0,    0,
    0,   56,   55,    0,   66,   68,   54,   57,   61,  215,
   69,   65,   58,   64,   59,   60,   27,   28,   29,   30,
   31,    0,   32,   33,   34,    0,    0,    0,   35,    0,
    0,    0,   67,    0,    0,    0,    0,    0,    0,   41,
    0,   42,   43,   44,   45,   46,    0,    0,    0,    0,
   47,   48,   49,   50,   51,   52,    0,   53,    0,   62,
    0,    0,   56,   55,    0,   66,   68,   54,    0,   61,
  226,   69,   65,   58,   64,   59,   60,   27,   28,   29,
   30,   31,    0,   32,   33,   34,    0,    0,    0,   35,
    0,    0,    0,   67,   57,    0,    0,    0,    0,    0,
   41,    0,   42,   43,   44,   45,   46,    0,    0,    0,
    0,   47,   48,   49,   50,   51,   52,    0,   53,    0,
   62,    0,    0,   56,   55,    0,   66,   68,   54,    0,
   61,  265,   69,   65,   58,   64,   59,   60,   27,   28,
   29,   30,   31,    0,   32,   33,   34,    0,    0,    0,
   35,    0,    0,    0,   67,   57,    0,    0,    0,    0,
    0,   41,    0,   42,   43,   44,   45,   46,    0,    0,
    0,    0,   47,   48,   49,   50,   51,   52,    0,   53,
    0,   62,  170,  171,   56,   55,    0,   66,   68,   54,
    0,   61,  273,   69,   65,   58,   64,   59,   60,    0,
    0,    0,    0,    0,    0,  180,    0,    0,  181,    0,
    0,  182,  183,  184,    0,   67,   57,    0,    0,    0,
    0,    0,    0,    0,    0,   27,   28,   29,   30,   31,
    0,   32,   33,   34,    0,    0,    0,   35,    0,    0,
    0,    0,   62,    0,    0,    0,    0,    0,   41,    0,
   42,   43,   44,   45,   46,    0,    0,    0,    0,   47,
   48,   49,   50,   51,   52,    0,   53,    0,    0,    0,
    0,   56,   55,    0,   66,   68,   54,   57,   61,    0,
   69,   65,   58,   64,   59,   60,   27,   28,   29,   30,
   31,    0,   32,   33,   34,    0,    0,    0,   35,    0,
    0,    0,   67,    0,    0,    0,    0,    0,    0,   41,
    0,   42,   43,   44,   45,   46,    0,    0,    0,    0,
   47,   48,   49,   50,   51,   52,    0,   53,    0,   62,
    0,    0,   56,   55,    0,   66,   68,   54,    0,   61,
  305,   69,   65,   58,   64,   59,   60,   27,   28,   29,
   30,   31,    0,   32,   33,   34,    0,    0,    0,   35,
    0,    0,    0,   67,   57,    0,    0,    0,    0,    0,
   41,    0,   42,   43,   44,   45,   46,    0,    0,    0,
    0,   47,   48,   49,   50,   51,   52,    0,   53,    0,
   62,    0,    0,   56,   55,    0,   66,   68,   54,    0,
   61,  307,   69,   65,   58,   64,   59,   60,   27,   28,
   29,   30,   31,    0,   32,   33,   34,    0,    0,    0,
   35,    0,    0,    0,   67,   57,    0,    0,    0,    0,
    0,   41,    0,   42,   43,   44,   45,   46,    0,    0,
    0,    0,   47,   48,   49,   50,   51,   52,    0,   53,
    0,   62,    0,    0,   56,   55,    0,   66,   68,   54,
    0,   61,  316,   69,   65,   58,   64,   59,   60,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   67,   57,    0,    0,    0,
    0,    0,    0,    0,   25,   27,   28,   29,   30,   31,
    0,   32,   33,   34,    0,    0,    0,   35,    0,    0,
    0,    0,   62,    0,    0,    0,    0,    0,   41,    0,
   42,   43,   44,   45,   46,   74,    0,    0,   74,   47,
   48,   49,   50,   51,   52,    0,   53,    0,    0,    0,
    0,   56,   55,   74,   66,   68,   54,   57,   61,    0,
   69,   65,   58,   64,   59,   60,   27,   28,   29,   30,
   31,    0,   32,   33,   34,    0,    0,    0,   35,    0,
    0,    0,   67,    0,    0,    0,    0,   74,    0,   41,
    0,   42,   43,   44,   45,   46,    0,    0,    0,    0,
   47,   48,   49,   50,   51,   52,    0,   53,    0,   62,
    0,    0,    0,   55,    0,    0,    0,    0,    0,  161,
    0,    0,  161,   58,    0,   59,   60,   27,   28,   29,
   30,   31,    0,   32,   33,   34,  161,  161,    0,   35,
    0,  161,    0,    0,   57,  168,  169,  170,  171,    0,
   41,    0,   42,   43,   44,   45,   46,    0,    0,    0,
    0,   47,   48,   49,   50,   51,   52,    0,   53,  179,
  180,  161,    0,  181,   55,    0,  182,  183,  184,    0,
  170,    0,    0,  170,   58,    0,   59,   60,   27,   28,
   29,   30,   31,    0,   32,   33,   34,  170,  170,    0,
   35,    0,  170,    0,    0,    0,    0,    0,    0,    0,
    0,   41,    0,   42,   43,   44,   45,   46,    0,    0,
    0,    0,   47,   48,   49,   50,   51,   52,    0,   53,
    0,    0,  170,  164,    0,   55,  164,    0,    0,    0,
    0,    0,    0,    0,    0,   58,    0,   59,   60,    0,
  164,  164,    0,    0,    0,  164,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   74,   74,   74,   74,
    0,    0,    0,   74,    0,   27,   28,   29,   30,   31,
    0,   32,   33,   34,    0,  164,    0,   35,    0,    0,
    0,    0,    0,    0,    0,   74,   74,    0,   41,    0,
   42,   43,   44,   45,   46,    0,    0,    0,    0,   47,
   48,   49,   50,   51,   52,    0,   53,    0,    0,    0,
  186,    0,   55,  186,    0,    0,    0,    0,    0,    0,
    0,    0,   58,    0,   59,   60,    0,  186,  186,    0,
    0,    0,  186,    0,    0,    0,    0,    0,    0,    0,
  161,  161,  161,  161,    0,    0,    0,  161,    0,  161,
    0,    0,    0,    0,    0,  161,  161,  161,  161,    0,
    0,    0,  186,   75,    0,    0,   75,    0,    0,  161,
  161,  161,    0,  161,  161,  161,  161,  161,  161,  161,
  161,   75,    0,  161,    0,    0,  161,  161,  161,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  170,  170,  170,  170,    0,  167,    0,  170,  167,
  170,    0,    0,    0,    0,   75,  170,  170,  170,  170,
    0,    0,    0,  167,  167,    0,    0,    0,  167,    0,
  170,  170,  170,    0,  170,  170,  170,  170,  170,  170,
  170,  170,    0,    0,  170,    0,    0,  170,  170,  170,
    0,    0,    0,    0,  164,  164,  164,  164,  167,  151,
    0,  164,  151,  164,    0,    0,    0,    0,    0,  164,
  164,  164,  164,    0,    0,    0,  151,  151,    0,    0,
    0,  151,    0,  164,  164,  164,    0,  164,  164,  164,
  164,  164,  164,  164,  164,    0,    0,  164,    0,    0,
  164,  164,  164,    0,    0,  168,  169,  170,  171,  146,
    0,  151,  146,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  146,  146,  178,  179,
  180,  146,    0,  181,    0,    0,  182,  183,  184,    0,
    0,  186,  186,  186,  186,    0,    0,    0,  186,    0,
  186,    0,    0,    0,    0,    0,  186,  186,  186,  186,
    0,  146,    0,    0,    0,    0,    0,    0,    0,    0,
  186,  186,  186,    0,  186,  186,  186,  186,  186,  186,
  186,  186,  149,    0,  186,  149,    0,  186,  186,  186,
    0,    0,    0,    0,   75,   75,   75,   75,    0,  149,
  149,   75,    0,    0,  149,    0,    0,    0,    0,  100,
  100,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  113,    0,   75,   75,    0,    0,  121,  100,  129,
    0,    0,    0,  135,  149,  100,    0,  167,  167,  167,
  167,    0,  147,    0,  167,  147,  167,  100,  100,  100,
  100,    0,  167,  167,  167,  167,    0,    0,    0,  147,
  147,    0,    0,    0,  147,    0,  167,  167,  167,    0,
  167,  167,  167,  167,  167,  167,  167,  167,    0,    0,
  167,    0,    0,  167,  167,  167,    0,    0,    0,    0,
  151,  151,  151,  151,  147,    0,    0,  151,  121,  151,
  157,    0,    0,  157,    0,  151,  151,  151,  151,    0,
    0,    0,    0,    0,    0,    0,    0,  157,  157,  151,
  151,  151,  157,  151,  151,  151,  151,  151,  151,  151,
  151,    0,    0,  151,    0,    0,  151,  151,  151,    0,
  146,  146,  146,  146,    0,    0,    0,  146,    0,  146,
  177,    0,  157,  177,    0,  146,  146,  146,  146,    0,
    0,    0,    0,    0,    0,  262,    0,  177,  177,  146,
  146,  146,  177,  146,  146,  146,  146,  146,  146,  146,
  146,    0,    0,  146,    0,    0,  146,  146,  146,    0,
    0,    0,  293,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  177,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  149,  149,  149,  149,    0,  180,    0,
  149,  180,  149,    0,    0,    0,    0,    0,  149,  149,
  149,  149,    0,    0,    0,  180,  180,    0,    0,    0,
  180,    0,  149,  149,  149,    0,  149,  149,  149,  149,
  149,  149,  149,  149,    0,    0,  149,    0,    0,  149,
  149,  149,    0,    0,    0,    0,    0,    0,    0,    0,
  180,    0,    0,  147,  147,  147,  147,    0,  145,    0,
  147,  145,  147,    0,    0,    0,    0,    0,  147,  147,
  147,  147,    0,    0,    0,  145,  145,    0,    0,    0,
  145,    0,  147,  147,  147,    0,  147,  147,  147,  147,
  147,  147,  147,  147,    0,    0,  147,    0,    0,  147,
  147,  147,    0,    0,    0,    0,    0,    0,    0,    0,
  145,  157,  157,  157,  157,    0,    0,    0,  157,    0,
  157,   77,    0,    0,   77,    0,  157,  157,  157,  157,
    0,    0,    0,    0,    0,    0,    0,    0,   77,   77,
  157,  157,  157,   77,  157,  157,  157,  157,  157,  157,
  157,  157,    0,    0,  157,    0,    0,  157,  157,  157,
    0,  177,  177,  177,  177,    0,    0,    0,  177,    0,
  177,   66,    0,   77,   66,    0,  177,  177,  177,  177,
    0,    0,    0,    0,    0,    0,    0,    0,   66,   66,
  177,  177,  177,   66,  177,  177,  177,  177,  177,  177,
  177,  177,    0,    0,  177,    0,    0,  177,  177,  177,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   66,    0,    0,    0,    0,    0,  180,
  180,  180,  180,    0,  144,    0,  180,  144,  180,    0,
    0,    0,    0,    0,  180,  180,  180,  180,    0,    0,
    0,  144,  144,    0,    0,    0,  144,    0,  180,  180,
  180,    0,  180,  180,  180,  180,  180,  180,  180,  180,
    0,    0,  180,    0,    0,  180,  180,  180,    0,    0,
    0,    0,    0,    0,    0,    0,  144,    0,    0,  145,
  145,  145,  145,    0,   83,    0,  145,   83,  145,    0,
    0,    0,    0,    0,  145,  145,  145,  145,    0,    0,
    0,   83,   83,    0,    0,    0,   83,    0,  145,  145,
  145,    0,  145,  145,  145,  145,  145,  145,  145,  145,
    0,    0,  145,    0,    0,  145,  145,  145,    0,    0,
    0,    0,    0,    0,    0,    0,   83,    0,    0,    0,
    0,    0,   77,   77,   77,   77,  187,    0,    0,   77,
    0,   77,    0,    0,    0,    0,    0,   77,   77,   77,
   77,    0,    0,  187,  187,    0,    0,    0,  187,    0,
    0,   77,   77,   77,    0,   77,   77,   77,   77,   77,
   77,   77,   77,    0,    0,   77,    0,    0,   77,   77,
   77,    0,   66,   66,   66,   66,  163,    0,  187,   66,
    0,   66,    0,    0,    0,    0,    0,   66,   66,   66,
   66,    0,    0,  163,  163,    0,    0,    0,  163,    0,
    0,   66,   66,   66,    0,   66,   66,   66,   66,   66,
   66,   66,   66,    0,    0,   66,    0,    0,   66,   66,
   66,    0,    0,    0,    0,    0,    0,    0,  163,    0,
    0,    0,    0,    0,    0,  144,  144,  144,  144,   80,
    0,    0,  144,    0,  144,    0,    0,    0,    0,    0,
  144,  144,  144,  144,    0,    0,   80,   80,    0,    0,
    0,   80,    0,    0,  144,  144,  144,    0,  144,  144,
  144,  144,  144,  144,  144,  144,    0,    0,  144,    0,
    0,  144,  144,  144,    0,    0,    0,    0,    0,    0,
    0,   80,    0,    0,    0,   83,   83,   83,   83,    0,
  123,    0,   83,  123,   83,    0,    0,    0,    0,    0,
   83,   83,   83,   83,    0,    0,    0,  123,  123,    0,
    0,    0,  123,    0,   83,   83,   83,    0,   83,   83,
   83,   83,   83,   83,   83,   83,    0,    0,   83,    0,
    0,   83,   83,   83,    0,    0,    0,    0,    0,    0,
    0,    0,  123,    0,    0,    0,    0,  187,  187,  187,
  187,    0,    0,    0,  187,    0,  187,  124,    0,    0,
  124,    0,  187,  187,  187,  187,    0,    0,    0,    0,
    0,    0,    0,    0,  124,  124,  187,  187,  187,  124,
  187,  187,  187,  187,  187,  187,  187,  187,    0,    0,
  187,    0,    0,  187,  187,  187,    0,  163,  163,  163,
  163,    0,  119,    0,  163,  119,  163,    0,    0,  124,
    0,    0,  163,  163,  163,  163,    0,    0,    0,  119,
  119,    0,    0,    0,  119,    0,  163,  163,  163,    0,
  163,  163,  163,  163,  163,  163,  163,  163,    0,    0,
  163,    0,    0,  163,  163,  163,    0,    0,    0,    0,
    0,    0,    0,    0,  119,    0,    0,    0,    0,    0,
   80,   80,   80,   80,    0,  120,    0,   80,  120,   80,
    0,    0,    0,    0,    0,   80,   80,   80,   80,    0,
    0,    0,  120,  120,    0,    0,    0,  120,    0,   80,
   80,   80,    0,   80,   80,   80,   80,   80,   80,   80,
   80,    0,    0,   80,    0,    0,   80,   80,   80,    0,
    0,    0,    0,    0,    0,    0,  162,  120,    0,  162,
    0,  123,  123,  123,  123,    0,  141,    0,  123,  141,
  123,    0,    0,  162,  162,    0,  123,  123,  123,  123,
    0,    0,    0,  141,  141,    0,    0,    0,  141,    0,
  123,  123,  123,    0,  123,  123,  123,  123,  123,  123,
  123,  123,    0,    0,  123,    0,    0,    0,  162,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  141,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  124,  124,
  124,  124,    0,  117,    0,  124,  117,  124,    0,    0,
    0,    0,    0,  124,  124,  124,  124,    0,    0,    0,
  117,  117,    0,    0,    0,  117,    0,  124,  124,  124,
    0,  124,  124,  124,  124,  124,  124,  124,  124,    0,
    0,  124,    0,  119,  119,  119,  119,    0,  118,    0,
  119,  118,  119,    0,    0,  117,    0,    0,  119,  119,
  119,  119,    0,    0,    0,  118,  118,    0,    0,    0,
  118,    0,  119,  119,  119,    0,  119,  119,  119,  119,
  119,  119,  119,  119,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  118,  103,    0,    0,  103,    0,  120,  120,  120,  120,
    0,  116,    0,  120,  116,  120,    0,    0,  103,  103,
    0,  120,  120,  120,  120,    0,    0,    0,  116,  116,
    0,    0,    0,  116,    0,  120,  120,  120,    0,  120,
  120,  120,  120,  120,  120,  120,  120,    0,    0,    0,
    0,    0,    0,  103,    0,    0,    0,  162,  162,  162,
  162,    0,   78,  116,  162,   78,    0,  141,  141,  141,
  141,    0,  104,    0,  141,  104,  141,    0,    0,   78,
   78,    0,  141,  141,  141,  141,  162,  162,  162,  104,
  104,    0,    0,    0,  104,    0,  141,  141,  141,    0,
  141,  141,  141,  141,  141,  141,  141,  141,    0,    0,
    0,    0,    0,    0,   78,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  104,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  117,  117,  117,  117,    0,  105,
    0,  117,  105,  117,    0,    0,    0,    0,    0,  117,
  117,  117,  117,    0,    0,    0,  105,  105,    0,    0,
    0,  105,    0,  117,  117,  117,    0,  117,  117,  117,
  117,  117,  117,  117,  117,    0,    0,    0,    0,  118,
  118,  118,  118,    0,  106,    0,  118,  106,  118,    0,
    0,  105,    0,    0,  118,  118,  118,  118,    0,    0,
    0,  106,  106,    0,    0,    0,  106,    0,  118,  118,
  118,    0,  118,  118,  118,  118,  118,  118,  118,  118,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  103,  103,  103,  103,  106,    0,    0,  103,
    0,    0,  116,  116,  116,  116,    0,  107,    0,  116,
  107,  116,    0,    0,    0,    0,    0,  116,  116,  116,
  116,  103,  103,  103,  107,  107,    0,    0,    0,  107,
    0,  116,  116,  116,    0,  116,  116,  116,  116,  116,
  116,  116,  116,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   78,   78,   78,   78,    0,    0,  107,
   78,    0,    0,  104,  104,  104,  104,    0,  169,    0,
  104,  169,  104,    0,    0,    0,    0,    0,  104,  104,
  104,  104,   78,   78,   78,  169,  169,    0,    0,    0,
  169,    0,  104,  104,  104,    0,  104,  104,  104,  104,
  104,  104,  104,  104,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  166,    0,
  169,  166,    0,    0,    0,    0,    0,    0,    0,    0,
  105,  105,  105,  105,    0,  166,  166,  105,    0,  105,
  166,    0,    0,    0,    0,  105,  105,  105,  105,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  105,
  105,  105,    0,  105,  105,  105,  105,  105,  105,  105,
  166,    0,    0,    0,    0,  106,  106,  106,  106,    0,
  130,    0,  106,  130,  106,    0,    0,    0,    0,    0,
  106,  106,    0,  106,    0,    0,    0,  130,  130,    0,
    0,    0,  130,    0,  106,  106,  106,    0,  106,  106,
  106,  106,  106,  106,  106,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  143,    0,    0,  143,
    0,    0,  130,  168,  169,  170,  171,    0,  107,  107,
  107,  107,    0,  143,  143,  107,    0,  107,  143,    0,
    0,    0,    0,  107,  107,  177,  178,  179,  180,    0,
    0,  181,    0,    0,  182,  183,  184,  107,  107,  107,
    0,  107,  107,  107,  107,  107,  107,  107,  143,    0,
    0,    0,    0,    0,    0,    0,    0,  168,    0,    0,
  168,    0,    0,    0,    0,    0,    0,    0,    0,  169,
  169,  169,  169,    0,  168,  168,  169,    0,  169,  168,
    0,    0,    0,    0,  169,  169,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  169,  169,
  169,    0,  169,  169,  169,  169,  169,  169,    0,  168,
    0,    0,    0,    0,  108,    0,    0,  108,    0,  166,
  166,  166,  166,    0,  109,    0,  166,  109,  166,    0,
    0,  108,  108,    0,  166,  166,  108,    0,    0,    0,
    0,  109,  109,    0,    0,    0,  109,    0,  166,  166,
  166,    0,  166,  166,  166,  166,  166,  166,    0,    0,
    0,    0,    0,    0,    0,    0,  108,    0,    0,  110,
    0,    0,  110,    0,    0,    0,  109,    0,    0,    0,
    0,  130,  130,  130,  130,    0,  110,  110,  130,    0,
  130,  110,    0,    0,    0,    0,  130,  130,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  130,  130,  130,    0,  130,  130,  130,  130,  130,  130,
    0,  110,  111,    0,    0,  111,    0,  143,  143,  143,
  143,    0,  113,    0,  143,  113,  143,    0,    0,  111,
  111,    0,  143,  143,  111,    0,    0,    0,    0,  113,
  113,    0,    0,    0,  113,    0,  143,  143,  143,    0,
  143,  143,  143,  143,  143,  143,    0,    0,    0,    0,
    0,    0,    0,    0,  111,    0,  114,    0,    0,  114,
    0,    0,    0,    0,  113,    0,    0,    0,  168,  168,
  168,  168,    0,  114,  114,  168,    0,  168,  114,    0,
    0,    0,    0,  168,  168,    0,    0,    0,    0,    0,
    0,    0,    0,  115,    0,    0,  115,  168,  168,  168,
    0,  168,  168,  168,  168,  168,  168,    0,  114,    0,
  115,  115,    0,    0,    0,  115,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  108,  108,  108,  108,    0,
    0,    0,  108,    0,  108,  109,  109,  109,  109,    0,
    0,  108,  109,    0,  109,  115,    0,    0,    0,    0,
    0,    0,    0,    0,  108,  108,  108,    0,  108,  108,
  108,  108,  108,  108,  109,  109,  109,    0,  109,  109,
  109,  109,  109,  109,  112,    0,    0,  112,    0,    0,
  110,  110,  110,  110,    0,    0,    0,  110,    0,  110,
    0,  112,  112,    0,    0,    0,  112,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  110,
  110,  110,    0,  110,  110,  110,  110,  110,  110,    0,
    0,    0,    0,    0,    0,    0,  112,    0,    0,    0,
    0,    0,    0,  111,  111,  111,  111,    0,    0,    0,
  111,    0,  111,  113,  113,  113,  113,    0,    0,    0,
  113,    0,  113,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  111,  111,  111,    0,  111,  111,  111,  111,
  111,    0,  113,  113,  113,    0,  113,  113,  113,  113,
    0,    0,    0,    0,    0,    0,    0,  114,  114,  114,
  114,    0,    0,    0,  114,    0,  114,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  114,  114,  114,    0,
  114,  114,  114,    0,  115,  115,  115,  115,    0,    0,
    0,  115,    0,  115,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  115,  115,  115,    0,  115,  115,  115,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  112,  112,  112,  112,    0,
    0,    0,  112,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  112,  112,  112,    0,  112,
};
static short yycheck[] = {                                      15,
   41,   59,   59,   41,   59,  101,   41,   93,  123,   36,
  203,   96,   59,   40,   59,   59,    0,   36,  340,   59,
   40,   40,  200,   40,  212,   91,  257,  367,  206,   41,
   41,  257,   91,   49,  276,  277,  132,  266,  267,  268,
   40,  270,  271,  257,   41,   61,   62,   59,   59,   33,
    8,    9,   36,   37,   38,   41,   40,  123,   42,   43,
  400,   45,  384,   41,  123,  123,   41,   41,  297,   36,
   37,   91,   91,   40,   91,   59,  123,   95,   41,  123,
   64,   41,   59,  123,   41,   59,   40,  208,  106,  210,
   33,   44,  278,   41,   40,    0,   59,   64,   41,   40,
  116,  117,   45,  123,  123,   48,  123,   91,   51,   41,
   53,   59,  300,   56,   57,   58,   59,   60,  134,   40,
  315,   64,   65,  318,  319,  320,  319,   59,   33,   40,
   40,   36,   37,   38,   40,   40,  123,   42,   43,  123,
   45,  125,  126,  159,  160,  161,  162,  163,  164,  165,
  166,   40,   59,   44,   59,  343,   59,  123,   59,   64,
  103,   59,  260,   41,   59,   41,  301,  302,  303,  185,
  186,  187,  188,  189,  190,  191,  192,  193,  257,   40,
   15,   59,  278,   59,  299,   40,   91,  203,  284,   41,
   41,  207,  208,   44,  210,   40,  212,  125,  299,   91,
  257,  320,  390,  219,  299,  221,  222,   36,  257,   36,
   45,   41,   63,   48,  230,  301,  302,  303,  123,   91,
  125,  126,  303,  125,  167,  168,  169,  170,  171,  172,
  173,  174,  175,  176,  177,  178,  179,  180,  181,  258,
   40,  299,  258,   93,  260,  261,  301,  302,  303,   41,
  260,  260,  195,   41,   41,   90,  301,  302,  303,   41,
  301,  302,  303,  301,  302,  303,  301,  302,  303,  296,
  105,   63,  256,  257,  258,  259,  260,  261,   41,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,
  274,  275,  377,   41,  123,  279,  280,  313,  282,  283,
  284,  285,  286,  319,  301,  302,  303,  291,  292,  293,
  294,  295,  296,  297,  298,  301,  302,  303,   40,   59,
  304,   93,  157,  301,  302,  303,  301,  302,  303,  345,
  314,   58,  316,  317,   41,  125,   63,  123,   59,  282,
  125,  301,  302,  303,  301,  302,  303,  125,  301,  302,
  303,  256,  257,  258,  259,  260,  261,  125,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
  275,  314,   41,  125,  279,  280,  392,  282,  283,  284,
  285,  286,    0,   41,   41,   59,  291,  292,  293,  294,
  295,  296,  297,  298,  301,  302,  303,   93,   40,  304,
  301,  302,  303,  301,  302,  303,  301,  302,  303,  314,
   41,  316,  317,   41,  123,   33,   41,   93,   36,   37,
   38,  123,   40,   59,   42,   43,   41,   45,  257,   41,
  281,  125,   41,  262,   41,   59,  287,  288,  289,  290,
   93,   59,  277,   59,  279,   35,   64,   52,   52,   15,
  285,  301,  302,  303,  305,  306,  307,  308,  309,  310,
  311,  312,  345,  392,  315,   24,  279,  318,  319,  320,
   -1,   -1,   -1,   91,   93,   -1,   33,   -1,   -1,   36,
   37,   38,   -1,   40,   41,   42,   43,   44,   45,  281,
   -1,   -1,   -1,   -1,   -1,  287,  288,  289,  290,   -1,
   -1,   58,   59,   -1,   -1,  123,   63,   64,  126,   -1,
   -1,   -1,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,   -1,   -1,  315,   -1,   -1,  318,  319,  320,  301,
  302,  303,   -1,   -1,   91,   -1,   93,   -1,   -1,   -1,
   33,   -1,   -1,   36,   37,   38,   46,   40,   41,   42,
   43,   44,   45,   -1,  281,   55,   -1,   -1,   -1,   -1,
  287,  288,  289,  290,   -1,   58,   59,   -1,   -1,  126,
   63,   64,  266,  267,  268,   -1,  270,  271,  305,  306,
  307,  308,  309,  310,  311,  312,  289,  290,  315,   -1,
   -1,  318,  319,  320,   -1,   -1,   -1,   -1,   -1,   -1,
   93,  101,   -1,  297,   -1,  301,  302,  303,  311,  312,
   -1,   41,  315,   -1,   44,  318,  319,  320,   -1,   41,
   -1,   -1,   44,   -1,  124,  301,  302,  303,   58,   59,
   -1,   -1,  132,  126,   -1,   -1,   58,   59,  256,  257,
  258,  259,  260,  261,   -1,  263,  264,  265,  301,  302,
  303,  269,   -1,   -1,  272,  273,  274,  275,   -1,   -1,
   -1,  279,  280,   93,  282,  283,  284,  285,  286,   -1,
   -1,   93,   -1,  291,  292,  293,  294,  295,  296,   -1,
  298,   63,  301,  302,  303,  312,  304,   -1,  315,   -1,
   -1,  318,  319,  320,   -1,   -1,  314,   -1,  316,  317,
  257,  258,  259,  260,  261,   -1,  263,  264,  265,   -1,
   -1,   -1,  269,   -1,   -1,  272,  273,  274,  275,   -1,
  125,   -1,  279,  280,  281,  282,  283,  284,  285,  286,
  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,
   -1,  298,   63,   -1,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,   -1,  314,  315,  316,
  317,  318,  319,  320,  257,  258,  259,  260,  261,   -1,
  263,  264,  265,   -1,   -1,   -1,  269,   -1,  278,  272,
  273,  274,  275,   -1,  284,   -1,  279,  280,  281,  282,
  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,
  293,  294,  295,  296,   -1,  298,   -1,   -1,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
   -1,  314,  315,  316,  317,  318,  319,  320,   33,   -1,
   -1,   36,   37,   38,   -1,   40,   -1,   42,   43,   -1,
   45,   -1,  272,  273,  274,  275,   -1,   -1,   -1,  279,
  272,  273,  274,  275,   59,   -1,   -1,  279,   -1,   64,
   -1,  266,  267,  268,   41,  270,  271,   -1,   -1,   -1,
   -1,  301,  302,  303,   -1,  305,   -1,   -1,   -1,  301,
  302,  303,   59,   -1,   -1,   -1,   91,   -1,   -1,   -1,
   -1,   33,  297,   -1,   36,   37,   38,   -1,   40,  281,
   42,   43,   -1,   45,   -1,  287,  288,  289,  290,  107,
  108,  109,  110,  111,  112,   -1,   93,   59,  123,   -1,
   -1,  126,   64,  305,  306,  307,  308,  309,  310,  311,
  312,   -1,   -1,  315,   -1,   -1,  318,  319,  320,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,
   -1,   -1,   33,   -1,   -1,   36,   37,   38,   -1,   40,
  281,   42,   43,   -1,   45,   -1,  287,  288,  289,  290,
   -1,  342,   -1,  344,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,   64,  126,  306,  307,  308,  309,  310,
  311,  312,  363,  364,  315,   -1,   -1,  318,  319,  320,
  371,   -1,   -1,   -1,   -1,   -1,  287,  378,  289,  290,
   91,  382,   -1,   33,   -1,  213,   36,   37,   38,   -1,
   40,   -1,   42,   43,   -1,   45,   -1,  398,  399,   -1,
  311,  312,   -1,   -1,  315,   -1,   -1,  318,  319,  320,
   -1,  369,  123,   -1,   64,  126,   -1,  375,  376,   -1,
   -1,  256,  257,  258,  259,  260,  261,  385,  263,  264,
  265,   -1,   -1,  391,  269,   -1,   -1,  272,  273,  274,
  275,   91,   -1,   -1,  279,  280,   -1,  282,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,  296,   -1,  298,   -1,  272,  273,  274,  275,  304,
   -1,   -1,  279,  123,   -1,   -1,  126,   -1,   -1,  314,
   -1,  316,  317,   -1,  256,  257,  258,  259,  260,  261,
   -1,  263,  264,  265,  301,  302,  303,  269,   -1,   -1,
  272,  273,  274,  275,   -1,   -1,   -1,  279,  280,   -1,
  282,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,   -1,  298,   -1,   -1,   -1,
   -1,   33,  304,   -1,   36,   37,   38,  289,   40,   29,
   42,   43,  314,   45,  316,  317,  257,  258,  259,  260,
  261,  262,  263,  264,  265,   -1,   46,   47,  269,   -1,
  312,   -1,   64,  315,   54,   -1,  318,  319,  320,  280,
   -1,  282,  283,  284,  285,  286,   66,   67,   68,   69,
  291,  292,  293,  294,  295,  296,   -1,  298,   -1,   91,
   -1,   -1,   33,  304,   -1,   36,   37,   38,   -1,   40,
   -1,   42,   43,  314,   45,  316,  317,  257,  258,  259,
  260,  261,   -1,  263,  264,  265,   -1,   -1,   59,  269,
   -1,  123,   -1,   64,  126,   -1,   -1,  117,   -1,   -1,
  280,   -1,  282,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,   -1,  298,   -1,
   91,   -1,   -1,   33,  304,   -1,   36,   37,   38,   -1,
   40,   41,   42,   43,  314,   45,  316,  317,  287,  288,
  289,  290,   -1,  272,  273,  274,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,   64,  126,   -1,  306,  307,  308,
  309,  310,  311,  312,   -1,   -1,  315,   -1,   -1,  318,
  319,  320,  301,  302,  303,   -1,  287,  288,  289,  290,
   -1,   91,   -1,   -1,   33,   -1,   -1,   36,   37,   38,
   -1,   40,   -1,   42,   43,   -1,   45,  308,  309,  310,
  311,  312,   -1,   -1,  315,   -1,   -1,  318,  319,  320,
   -1,   -1,   -1,   -1,   -1,   64,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
   -1,  263,  264,  265,   -1,   -1,   -1,  269,   -1,   -1,
   -1,   -1,   91,   -1,   93,   -1,   -1,   -1,  280,   -1,
  282,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,   -1,  298,   -1,   -1,   -1,
   -1,   33,  304,   -1,   36,   37,   38,  126,   40,   41,
   42,   43,  314,   45,  316,  317,  257,  258,  259,  260,
  261,   -1,  263,  264,  265,   -1,   -1,   -1,  269,   -1,
   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,  280,
   -1,  282,  283,  284,  285,  286,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,   -1,  298,   -1,   91,
   -1,   -1,   33,  304,   -1,   36,   37,   38,   -1,   40,
   41,   42,   43,  314,   45,  316,  317,  257,  258,  259,
  260,  261,   -1,  263,  264,  265,   -1,   -1,   -1,  269,
   -1,   -1,   -1,   64,  126,   -1,   -1,   -1,   -1,   -1,
  280,   -1,  282,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,   -1,  298,   -1,
   91,   -1,   -1,   33,  304,   -1,   36,   37,   38,   -1,
   40,   41,   42,   43,  314,   45,  316,  317,  257,  258,
  259,  260,  261,   -1,  263,  264,  265,   -1,   -1,   -1,
  269,   -1,   -1,   -1,   64,  126,   -1,   -1,   -1,   -1,
   -1,  280,   -1,  282,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,  298,
   -1,   91,  289,  290,   33,  304,   -1,   36,   37,   38,
   -1,   40,   41,   42,   43,  314,   45,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,  312,   -1,   -1,  315,   -1,
   -1,  318,  319,  320,   -1,   64,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
   -1,  263,  264,  265,   -1,   -1,   -1,  269,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,  280,   -1,
  282,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,   -1,  298,   -1,   -1,   -1,
   -1,   33,  304,   -1,   36,   37,   38,  126,   40,   -1,
   42,   43,  314,   45,  316,  317,  257,  258,  259,  260,
  261,   -1,  263,  264,  265,   -1,   -1,   -1,  269,   -1,
   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,  280,
   -1,  282,  283,  284,  285,  286,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,   -1,  298,   -1,   91,
   -1,   -1,   33,  304,   -1,   36,   37,   38,   -1,   40,
   41,   42,   43,  314,   45,  316,  317,  257,  258,  259,
  260,  261,   -1,  263,  264,  265,   -1,   -1,   -1,  269,
   -1,   -1,   -1,   64,  126,   -1,   -1,   -1,   -1,   -1,
  280,   -1,  282,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,   -1,  298,   -1,
   91,   -1,   -1,   33,  304,   -1,   36,   37,   38,   -1,
   40,   41,   42,   43,  314,   45,  316,  317,  257,  258,
  259,  260,  261,   -1,  263,  264,  265,   -1,   -1,   -1,
  269,   -1,   -1,   -1,   64,  126,   -1,   -1,   -1,   -1,
   -1,  280,   -1,  282,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,  298,
   -1,   91,   -1,   -1,   33,  304,   -1,   36,   37,   38,
   -1,   40,   41,   42,   43,  314,   45,  316,  317,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   64,  126,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,  258,  259,  260,  261,
   -1,  263,  264,  265,   -1,   -1,   -1,  269,   -1,   -1,
   -1,   -1,   91,   -1,   -1,   -1,   -1,   -1,  280,   -1,
  282,  283,  284,  285,  286,   41,   -1,   -1,   44,  291,
  292,  293,  294,  295,  296,   -1,  298,   -1,   -1,   -1,
   -1,   33,  304,   59,   36,   37,   38,  126,   40,   -1,
   42,   43,  314,   45,  316,  317,  257,  258,  259,  260,
  261,   -1,  263,  264,  265,   -1,   -1,   -1,  269,   -1,
   -1,   -1,   64,   -1,   -1,   -1,   -1,   93,   -1,  280,
   -1,  282,  283,  284,  285,  286,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  296,   -1,  298,   -1,   91,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   41,
   -1,   -1,   44,  314,   -1,  316,  317,  257,  258,  259,
  260,  261,   -1,  263,  264,  265,   58,   59,   -1,  269,
   -1,   63,   -1,   -1,  126,  287,  288,  289,  290,   -1,
  280,   -1,  282,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,  296,   -1,  298,  311,
  312,   93,   -1,  315,  304,   -1,  318,  319,  320,   -1,
   41,   -1,   -1,   44,  314,   -1,  316,  317,  257,  258,
  259,  260,  261,   -1,  263,  264,  265,   58,   59,   -1,
  269,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  280,   -1,  282,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,  292,  293,  294,  295,  296,   -1,  298,
   -1,   -1,   93,   41,   -1,  304,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,  317,   -1,
   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,  274,  275,
   -1,   -1,   -1,  279,   -1,  257,  258,  259,  260,  261,
   -1,  263,  264,  265,   -1,   93,   -1,  269,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  301,  302,   -1,  280,   -1,
  282,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
  292,  293,  294,  295,  296,   -1,  298,   -1,   -1,   -1,
   41,   -1,  304,   44,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,  317,   -1,   58,   59,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  272,  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,
   -1,   -1,   -1,   -1,   -1,  287,  288,  289,  290,   -1,
   -1,   -1,   93,   41,   -1,   -1,   44,   -1,   -1,  301,
  302,  303,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,   59,   -1,  315,   -1,   -1,  318,  319,  320,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,   -1,   41,   -1,  279,   44,
  281,   -1,   -1,   -1,   -1,   93,  287,  288,  289,  290,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
  301,  302,  303,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,   -1,   -1,  315,   -1,   -1,  318,  319,  320,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,   93,   41,
   -1,  279,   44,  281,   -1,   -1,   -1,   -1,   -1,  287,
  288,  289,  290,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,  301,  302,  303,   -1,  305,  306,  307,
  308,  309,  310,  311,  312,   -1,   -1,  315,   -1,   -1,
  318,  319,  320,   -1,   -1,  287,  288,  289,  290,   41,
   -1,   93,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,  310,  311,
  312,   63,   -1,  315,   -1,   -1,  318,  319,  320,   -1,
   -1,  272,  273,  274,  275,   -1,   -1,   -1,  279,   -1,
  281,   -1,   -1,   -1,   -1,   -1,  287,  288,  289,  290,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  301,  302,  303,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,   41,   -1,  315,   44,   -1,  318,  319,  320,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,   58,
   59,  279,   -1,   -1,   63,   -1,   -1,   -1,   -1,   28,
   29,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   40,   -1,  301,  302,   -1,   -1,   46,   47,   48,
   -1,   -1,   -1,   52,   93,   54,   -1,  272,  273,  274,
  275,   -1,   41,   -1,  279,   44,  281,   66,   67,   68,
   69,   -1,  287,  288,  289,  290,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   63,   -1,  301,  302,  303,   -1,
  305,  306,  307,  308,  309,  310,  311,  312,   -1,   -1,
  315,   -1,   -1,  318,  319,  320,   -1,   -1,   -1,   -1,
  272,  273,  274,  275,   93,   -1,   -1,  279,  117,  281,
   41,   -1,   -1,   44,   -1,  287,  288,  289,  290,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,  301,
  302,  303,   63,  305,  306,  307,  308,  309,  310,  311,
  312,   -1,   -1,  315,   -1,   -1,  318,  319,  320,   -1,
  272,  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,
   41,   -1,   93,   44,   -1,  287,  288,  289,  290,   -1,
   -1,   -1,   -1,   -1,   -1,  184,   -1,   58,   59,  301,
  302,  303,   63,  305,  306,  307,  308,  309,  310,  311,
  312,   -1,   -1,  315,   -1,   -1,  318,  319,  320,   -1,
   -1,   -1,  211,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,  274,  275,   -1,   41,   -1,
  279,   44,  281,   -1,   -1,   -1,   -1,   -1,  287,  288,
  289,  290,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   63,   -1,  301,  302,  303,   -1,  305,  306,  307,  308,
  309,  310,  311,  312,   -1,   -1,  315,   -1,   -1,  318,
  319,  320,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   -1,   -1,  272,  273,  274,  275,   -1,   41,   -1,
  279,   44,  281,   -1,   -1,   -1,   -1,   -1,  287,  288,
  289,  290,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   63,   -1,  301,  302,  303,   -1,  305,  306,  307,  308,
  309,  310,  311,  312,   -1,   -1,  315,   -1,   -1,  318,
  319,  320,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,  272,  273,  274,  275,   -1,   -1,   -1,  279,   -1,
  281,   41,   -1,   -1,   44,   -1,  287,  288,  289,  290,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
  301,  302,  303,   63,  305,  306,  307,  308,  309,  310,
  311,  312,   -1,   -1,  315,   -1,   -1,  318,  319,  320,
   -1,  272,  273,  274,  275,   -1,   -1,   -1,  279,   -1,
  281,   41,   -1,   93,   44,   -1,  287,  288,  289,  290,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
  301,  302,  303,   63,  305,  306,  307,  308,  309,  310,
  311,  312,   -1,   -1,  315,   -1,   -1,  318,  319,  320,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,   -1,   41,   -1,  279,   44,  281,   -1,
   -1,   -1,   -1,   -1,  287,  288,  289,  290,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,  301,  302,
  303,   -1,  305,  306,  307,  308,  309,  310,  311,  312,
   -1,   -1,  315,   -1,   -1,  318,  319,  320,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,  272,
  273,  274,  275,   -1,   41,   -1,  279,   44,  281,   -1,
   -1,   -1,   -1,   -1,  287,  288,  289,  290,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,  301,  302,
  303,   -1,  305,  306,  307,  308,  309,  310,  311,  312,
   -1,   -1,  315,   -1,   -1,  318,  319,  320,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,   41,   -1,   -1,  279,
   -1,  281,   -1,   -1,   -1,   -1,   -1,  287,  288,  289,
  290,   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,  301,  302,  303,   -1,  305,  306,  307,  308,  309,
  310,  311,  312,   -1,   -1,  315,   -1,   -1,  318,  319,
  320,   -1,  272,  273,  274,  275,   41,   -1,   93,  279,
   -1,  281,   -1,   -1,   -1,   -1,   -1,  287,  288,  289,
  290,   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
   -1,  301,  302,  303,   -1,  305,  306,  307,  308,  309,
  310,  311,  312,   -1,   -1,  315,   -1,   -1,  318,  319,
  320,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,  274,  275,   41,
   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,
  287,  288,  289,  290,   -1,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,   -1,  301,  302,  303,   -1,  305,  306,
  307,  308,  309,  310,  311,  312,   -1,   -1,  315,   -1,
   -1,  318,  319,  320,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,  272,  273,  274,  275,   -1,
   41,   -1,  279,   44,  281,   -1,   -1,   -1,   -1,   -1,
  287,  288,  289,  290,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   63,   -1,  301,  302,  303,   -1,  305,  306,
  307,  308,  309,  310,  311,  312,   -1,   -1,  315,   -1,
   -1,  318,  319,  320,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   93,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,   -1,   -1,   -1,  279,   -1,  281,   41,   -1,   -1,
   44,   -1,  287,  288,  289,  290,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,  301,  302,  303,   63,
  305,  306,  307,  308,  309,  310,  311,  312,   -1,   -1,
  315,   -1,   -1,  318,  319,  320,   -1,  272,  273,  274,
  275,   -1,   41,   -1,  279,   44,  281,   -1,   -1,   93,
   -1,   -1,  287,  288,  289,  290,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   63,   -1,  301,  302,  303,   -1,
  305,  306,  307,  308,  309,  310,  311,  312,   -1,   -1,
  315,   -1,   -1,  318,  319,  320,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,
  272,  273,  274,  275,   -1,   41,   -1,  279,   44,  281,
   -1,   -1,   -1,   -1,   -1,  287,  288,  289,  290,   -1,
   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,  301,
  302,  303,   -1,  305,  306,  307,  308,  309,  310,  311,
  312,   -1,   -1,  315,   -1,   -1,  318,  319,  320,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   93,   -1,   44,
   -1,  272,  273,  274,  275,   -1,   41,   -1,  279,   44,
  281,   -1,   -1,   58,   59,   -1,  287,  288,  289,  290,
   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,
  301,  302,  303,   -1,  305,  306,  307,  308,  309,  310,
  311,  312,   -1,   -1,  315,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,
  274,  275,   -1,   41,   -1,  279,   44,  281,   -1,   -1,
   -1,   -1,   -1,  287,  288,  289,  290,   -1,   -1,   -1,
   58,   59,   -1,   -1,   -1,   63,   -1,  301,  302,  303,
   -1,  305,  306,  307,  308,  309,  310,  311,  312,   -1,
   -1,  315,   -1,  272,  273,  274,  275,   -1,   41,   -1,
  279,   44,  281,   -1,   -1,   93,   -1,   -1,  287,  288,
  289,  290,   -1,   -1,   -1,   58,   59,   -1,   -1,   -1,
   63,   -1,  301,  302,  303,   -1,  305,  306,  307,  308,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   93,   41,   -1,   -1,   44,   -1,  272,  273,  274,  275,
   -1,   41,   -1,  279,   44,  281,   -1,   -1,   58,   59,
   -1,  287,  288,  289,  290,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   63,   -1,  301,  302,  303,   -1,  305,
  306,  307,  308,  309,  310,  311,  312,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   -1,   -1,   -1,  272,  273,  274,
  275,   -1,   41,   93,  279,   44,   -1,  272,  273,  274,
  275,   -1,   41,   -1,  279,   44,  281,   -1,   -1,   58,
   59,   -1,  287,  288,  289,  290,  301,  302,  303,   58,
   59,   -1,   -1,   -1,   63,   -1,  301,  302,  303,   -1,
  305,  306,  307,  308,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,   41,
   -1,  279,   44,  281,   -1,   -1,   -1,   -1,   -1,  287,
  288,  289,  290,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,  301,  302,  303,   -1,  305,  306,  307,
  308,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,   -1,   41,   -1,  279,   44,  281,   -1,
   -1,   93,   -1,   -1,  287,  288,  289,  290,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,  301,  302,
  303,   -1,  305,  306,  307,  308,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  272,  273,  274,  275,   93,   -1,   -1,  279,
   -1,   -1,  272,  273,  274,  275,   -1,   41,   -1,  279,
   44,  281,   -1,   -1,   -1,   -1,   -1,  287,  288,  289,
  290,  301,  302,  303,   58,   59,   -1,   -1,   -1,   63,
   -1,  301,  302,  303,   -1,  305,  306,  307,  308,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,  274,  275,   -1,   -1,   93,
  279,   -1,   -1,  272,  273,  274,  275,   -1,   41,   -1,
  279,   44,  281,   -1,   -1,   -1,   -1,   -1,  287,  288,
  289,  290,  301,  302,  303,   58,   59,   -1,   -1,   -1,
   63,   -1,  301,  302,  303,   -1,  305,  306,  307,  308,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,
   93,   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  272,  273,  274,  275,   -1,   58,   59,  279,   -1,  281,
   63,   -1,   -1,   -1,   -1,  287,  288,  289,  290,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  301,
  302,  303,   -1,  305,  306,  307,  308,  309,  310,  311,
   93,   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,
   41,   -1,  279,   44,  281,   -1,   -1,   -1,   -1,   -1,
  287,  288,   -1,  290,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   63,   -1,  301,  302,  303,   -1,  305,  306,
  307,  308,  309,  310,  311,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   93,  287,  288,  289,  290,   -1,  272,  273,
  274,  275,   -1,   58,   59,  279,   -1,  281,   63,   -1,
   -1,   -1,   -1,  287,  288,  309,  310,  311,  312,   -1,
   -1,  315,   -1,   -1,  318,  319,  320,  301,  302,  303,
   -1,  305,  306,  307,  308,  309,  310,  311,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,
  273,  274,  275,   -1,   58,   59,  279,   -1,  281,   63,
   -1,   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  301,  302,
  303,   -1,  305,  306,  307,  308,  309,  310,   -1,   93,
   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,  272,
  273,  274,  275,   -1,   41,   -1,  279,   44,  281,   -1,
   -1,   58,   59,   -1,  287,  288,   63,   -1,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,  301,  302,
  303,   -1,  305,  306,  307,  308,  309,  310,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   41,
   -1,   -1,   44,   -1,   -1,   -1,   93,   -1,   -1,   -1,
   -1,  272,  273,  274,  275,   -1,   58,   59,  279,   -1,
  281,   63,   -1,   -1,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  301,  302,  303,   -1,  305,  306,  307,  308,  309,  310,
   -1,   93,   41,   -1,   -1,   44,   -1,  272,  273,  274,
  275,   -1,   41,   -1,  279,   44,  281,   -1,   -1,   58,
   59,   -1,  287,  288,   63,   -1,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   63,   -1,  301,  302,  303,   -1,
  305,  306,  307,  308,  309,  310,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,  272,  273,
  274,  275,   -1,   58,   59,  279,   -1,  281,   63,   -1,
   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   41,   -1,   -1,   44,  301,  302,  303,
   -1,  305,  306,  307,  308,  309,  310,   -1,   93,   -1,
   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,
   -1,   -1,  279,   -1,  281,  272,  273,  274,  275,   -1,
   -1,  288,  279,   -1,  281,   93,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  301,  302,  303,   -1,  305,  306,
  307,  308,  309,  310,  301,  302,  303,   -1,  305,  306,
  307,  308,  309,  310,   41,   -1,   -1,   44,   -1,   -1,
  272,  273,  274,  275,   -1,   -1,   -1,  279,   -1,  281,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  301,
  302,  303,   -1,  305,  306,  307,  308,  309,  310,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,
   -1,   -1,   -1,  272,  273,  274,  275,   -1,   -1,   -1,
  279,   -1,  281,  272,  273,  274,  275,   -1,   -1,   -1,
  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  301,  302,  303,   -1,  305,  306,  307,  308,
  309,   -1,  301,  302,  303,   -1,  305,  306,  307,  308,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  272,  273,  274,
  275,   -1,   -1,   -1,  279,   -1,  281,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  301,  302,  303,   -1,
  305,  306,  307,   -1,  272,  273,  274,  275,   -1,   -1,
   -1,  279,   -1,  281,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  301,  302,  303,   -1,  305,  306,  307,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  272,  273,  274,  275,   -1,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  301,  302,  303,   -1,  305,
};
#define YYFINAL 1
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 320
#if YYDEBUG
static char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,"'$'","'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'",0,0,0,0,0,0,0,
0,0,0,0,0,"':'","';'",0,0,0,"'?'","'@'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,"'{'",0,"'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"WORD","METHOD","FUNCMETH","THING",
"PMFUNC","PRIVATEREF","FUNC0SUB","UNIOPSUB","LSTOPSUB","LABEL","FORMAT","SUB",
"ANONSUB","PACKAGE","USE","WHILE","UNTIL","IF","UNLESS","ELSE","ELSIF",
"CONTINUE","FOR","LOOPEX","DOTDOT","FUNC0","FUNC1","FUNC","UNIOP","LSTOP",
"RELOP","EQOP","MULOP","ADDOP","DOLSHARP","DO","HASHBRACK","NOAMP","LOCAL","MY",
"MYSUB","REQUIRE","COLONATTR","PREC_LOW","OROP","DOROP","ANDOP","NOTOP",
"ASSIGNOP","OROR","DORDOR","ANDAND","BITOROP","BITANDOP","SHIFTOP","MATCHOP",
"UMINUS","REFGEN","POWOP","PREINC","PREDEC","POSTINC","POSTDEC","ARROW",
};
static char *yyrule[] = {
"$accept : prog",
"prog : progstart lineseq",
"block : '{' remember lineseq '}'",
"remember :",
"progstart :",
"mblock : '{' mremember lineseq '}'",
"mremember :",
"lineseq :",
"lineseq : lineseq decl",
"lineseq : lineseq line",
"line : label cond",
"line : loop",
"line : label ';'",
"line : label sideff ';'",
"sideff : error",
"sideff : expr",
"sideff : expr IF expr",
"sideff : expr UNLESS expr",
"sideff : expr WHILE expr",
"sideff : expr UNTIL iexpr",
"sideff : expr FOR expr",
"else :",
"else : ELSE mblock",
"else : ELSIF '(' mexpr ')' mblock else",
"cond : IF '(' remember mexpr ')' mblock else",
"cond : UNLESS '(' remember miexpr ')' mblock else",
"cont :",
"cont : CONTINUE block",
"loop : label WHILE '(' remember texpr ')' mintro mblock cont",
"loop : label UNTIL '(' remember iexpr ')' mintro mblock cont",
"loop : label FOR MY remember my_scalar '(' mexpr ')' mblock cont",
"loop : label FOR scalar '(' remember mexpr ')' mblock cont",
"loop : label FOR '(' remember mexpr ')' mblock cont",
"loop : label FOR '(' remember mnexpr ';' texpr ';' mintro mnexpr ')' mblock",
"loop : label block cont",
"mintro :",
"nexpr :",
"nexpr : sideff",
"texpr :",
"texpr : expr",
"iexpr : expr",
"mexpr : expr",
"mnexpr : nexpr",
"miexpr : iexpr",
"label :",
"label : LABEL",
"decl : format",
"decl : subrout",
"decl : mysubrout",
"decl : package",
"decl : use",
"format : FORMAT startformsub formname block",
"formname : WORD",
"formname :",
"mysubrout : MYSUB startsub subname proto subattrlist subbody",
"subrout : SUB startsub subname proto subattrlist subbody",
"startsub :",
"startanonsub :",
"startformsub :",
"subname : WORD",
"proto :",
"proto : THING",
"subattrlist :",
"subattrlist : COLONATTR THING",
"subattrlist : COLONATTR",
"myattrlist : COLONATTR THING",
"myattrlist : COLONATTR",
"subbody : block",
"subbody : ';'",
"package : PACKAGE WORD ';'",
"package : PACKAGE ';'",
"$$1 :",
"use : USE startsub $$1 WORD WORD listexpr ';'",
"expr : expr ANDOP expr",
"expr : expr OROP expr",
"expr : expr DOROP expr",
"expr : argexpr",
"argexpr : argexpr ','",
"argexpr : argexpr ',' term",
"argexpr : term",
"listop : LSTOP indirob argexpr",
"listop : FUNC '(' indirob expr ')'",
"listop : term ARROW method '(' listexprcom ')'",
"listop : term ARROW method",
"listop : METHOD indirob listexpr",
"listop : FUNCMETH indirob '(' listexprcom ')'",
"listop : LSTOP listexpr",
"listop : FUNC '(' listexprcom ')'",
"$$2 :",
"listop : LSTOPSUB startanonsub block $$2 listexpr",
"method : METHOD",
"method : scalar",
"subscripted : star '{' expr ';' '}'",
"subscripted : scalar '[' expr ']'",
"subscripted : term ARROW '[' expr ']'",
"subscripted : subscripted '[' expr ']'",
"subscripted : scalar '{' expr ';' '}'",
"subscripted : term ARROW '{' expr ';' '}'",
"subscripted : subscripted '{' expr ';' '}'",
"subscripted : term ARROW '(' ')'",
"subscripted : term ARROW '(' expr ')'",
"subscripted : subscripted '(' expr ')'",
"subscripted : subscripted '(' ')'",
"termbinop : term ASSIGNOP term",
"termbinop : term POWOP term",
"termbinop : term MULOP term",
"termbinop : term ADDOP term",
"termbinop : term SHIFTOP term",
"termbinop : term RELOP term",
"termbinop : term EQOP term",
"termbinop : term BITANDOP term",
"termbinop : term BITOROP term",
"termbinop : term DOTDOT term",
"termbinop : term ANDAND term",
"termbinop : term OROR term",
"termbinop : term DORDOR term",
"termbinop : term MATCHOP term",
"termunop : '-' term",
"termunop : '+' term",
"termunop : '!' term",
"termunop : '~' term",
"termunop : term POSTINC",
"termunop : term POSTDEC",
"termunop : PREINC term",
"termunop : PREDEC term",
"anonymous : '[' expr ']'",
"anonymous : '[' ']'",
"anonymous : HASHBRACK expr ';' '}'",
"anonymous : HASHBRACK ';' '}'",
"anonymous : ANONSUB startanonsub proto subattrlist block",
"termdo : DO term",
"termdo : DO block",
"termdo : DO WORD '(' ')'",
"termdo : DO WORD '(' expr ')'",
"termdo : DO scalar '(' ')'",
"termdo : DO scalar '(' expr ')'",
"term : termbinop",
"term : termunop",
"term : anonymous",
"term : termdo",
"term : term '?' term ':' term",
"term : REFGEN term",
"term : myattrterm",
"term : LOCAL term",
"term : '(' expr ')'",
"term : '(' ')'",
"term : scalar",
"term : star",
"term : hsh",
"term : ary",
"term : arylen",
"term : subscripted",
"term : '(' expr ')' '[' expr ']'",
"term : '(' ')' '[' expr ']'",
"term : ary '[' expr ']'",
"term : ary '{' expr ';' '}'",
"term : THING",
"term : amper",
"term : amper '(' ')'",
"term : amper '(' expr ')'",
"term : NOAMP WORD listexpr",
"term : LOOPEX",
"term : LOOPEX term",
"term : NOTOP argexpr",
"term : UNIOP",
"term : UNIOP block",
"term : UNIOP term",
"term : REQUIRE",
"term : REQUIRE term",
"term : UNIOPSUB term",
"term : FUNC0",
"term : FUNC0 '(' ')'",
"term : FUNC0SUB",
"term : FUNC1 '(' ')'",
"term : FUNC1 '(' expr ')'",
"term : PMFUNC '(' term ')'",
"term : PMFUNC '(' term ',' term ')'",
"term : WORD",
"term : listop",
"myattrterm : MY myterm myattrlist",
"myattrterm : MY myterm",
"myterm : '(' expr ')'",
"myterm : '(' ')'",
"myterm : scalar",
"myterm : hsh",
"myterm : ary",
"listexpr :",
"listexpr : argexpr",
"listexprcom :",
"listexprcom : expr",
"listexprcom : expr ','",
"my_scalar : scalar",
"amper : '&' indirob",
"scalar : '$' indirob",
"ary : '@' indirob",
"hsh : '%' indirob",
"arylen : DOLSHARP indirob",
"star : '*' indirob",
"indirob : WORD",
"indirob : scalar",
"indirob : block",
"indirob : PRIVATEREF",
};
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
#line 816 "perly.y"
 /* PROGRAM */

/* more stuff added to make perly_c.diff easier to apply */

#ifdef yyparse
#undef yyparse
#endif
#define yyparse() Perl_yyparse(pTHX)

#line 1466 "perly.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
    register short *yyssp;
    register YYSTYPE *yyvsp;
    short* yyss;
    YYSTYPE* yyvs;
    unsigned yystacksize = YYSTACKSIZE;
    int retval = 0;
#if YYDEBUG
    register char *yys;
#endif

    struct ysv *ysave;
#ifdef USE_ITHREADS
    ENTER;			/* force yydestruct() before we return */
#endif
    New(73, ysave, 1, struct ysv);
    SAVEDESTRUCTOR_X(yydestruct, ysave);
    ysave->oldyydebug	= yydebug;
    ysave->oldyynerrs	= yynerrs;
    ysave->oldyyerrflag	= yyerrflag;
    ysave->oldyychar	= yychar;
    ysave->oldyyval	= yyval;
    ysave->oldyylval	= yylval;

#if YYDEBUG
  {
    register int saved_errno = errno;
#ifdef VMS
    register int saved_vaxc_errno = vaxc$errno;
#else
    register int saved_vaxc_errno = 0;
#endif
    if ((yys = getenv("YYDEBUG")))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
    else SETERRNO(saved_errno,saved_vaxc_errno);
  }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    /*
    ** Initialize private stacks (yyparse may be called from an action)
    */
    New(73, yyss, yystacksize, short);
    New(73, yyvs, yystacksize, YYSTYPE);
    ysave->yyss = yyss;
    ysave->yyvs = yyvs;
    if (!yyvs || !yyss)
	goto yyoverflow;

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if ((yyn = yydefred[yystate])) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            PerlIO_printf(Perl_debug_log, "yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            PerlIO_printf(Perl_debug_log, "yydebug: state %d, shifting to state %d\n",
                    yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
	    /*
	    ** reallocate and recover.  Note that pointers
	    ** have to be reset, or bad things will happen
	    */
	    int yyps_index = (yyssp - yyss);
	    int yypv_index = (yyvsp - yyvs);
	    yystacksize += YYSTACKSIZE;
	    ysave->yyvs = Renew(yyvs, yystacksize, YYSTYPE);
	    ysave->yyss = Renew(yyss, yystacksize, short);
	    if (!yyvs || !yyss)
            goto yyoverflow;
	    yyssp = yyss + yyps_index;
	    yyvsp = yyvs + yypv_index;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint

#endif

    yyerror("syntax error");
#ifdef lint

#endif

    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    PerlIO_printf(Perl_debug_log, "yydebug: state %d, error recovery shifting\
 to state %d\n", *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
		    /*
		    ** reallocate and recover.  Note that pointers
		    ** have to be reset, or bad things will happen
		    */
		    int yyps_index = (yyssp - yyss);
		    int yypv_index = (yyvsp - yyvs);
		    yystacksize += YYSTACKSIZE;
		    ysave->yyvs = Renew(yyvs, yystacksize, YYSTYPE);
		    ysave->yyss = Renew(yyss, yystacksize, short);
		    if (!yyvs || !yyss)
                    goto yyoverflow;
		    yyssp = yyss + yyps_index;
		    yyvsp = yyvs + yypv_index;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    PerlIO_printf(Perl_debug_log, "yydebug: error recovery discarding state %d\n",
                            *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            PerlIO_printf(Perl_debug_log, "yydebug: state %d, error recovery discards token %d (%s)\n",
                    yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        PerlIO_printf(Perl_debug_log, "yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 141 "perly.y"
{ yyval.ival = yyvsp[-1].ival; newPROG(block_end(yyvsp[-1].ival,yyvsp[0].opval)); }
break;
case 2:
#line 146 "perly.y"
{ if (PL_copline > (line_t)yyvsp[-3].ival)
			      PL_copline = (line_t)yyvsp[-3].ival;
			  yyval.opval = block_end(yyvsp[-2].ival, yyvsp[-1].opval); }
break;
case 3:
#line 152 "perly.y"
{ yyval.ival = block_start(TRUE); }
break;
case 4:
#line 156 "perly.y"
{
#if defined(YYDEBUG) && defined(DEBUGGING)
		    yydebug = (DEBUG_p_TEST);
#endif
		    PL_expect = XSTATE; yyval.ival = block_start(TRUE);
		}
break;
case 5:
#line 166 "perly.y"
{ if (PL_copline > (line_t)yyvsp[-3].ival)
			      PL_copline = (line_t)yyvsp[-3].ival;
			  yyval.opval = block_end(yyvsp[-2].ival, yyvsp[-1].opval); }
break;
case 6:
#line 172 "perly.y"
{ yyval.ival = block_start(FALSE); }
break;
case 7:
#line 177 "perly.y"
{ yyval.opval = Nullop; }
break;
case 8:
#line 179 "perly.y"
{ yyval.opval = yyvsp[-1].opval; }
break;
case 9:
#line 181 "perly.y"
{   yyval.opval = append_list(OP_LINESEQ,
				(LISTOP*)yyvsp[-1].opval, (LISTOP*)yyvsp[0].opval);
			    PL_pad_reset_pending = TRUE;
			    if (yyvsp[-1].opval && yyvsp[0].opval) PL_hints |= HINT_BLOCK_SCOPE; }
break;
case 10:
#line 189 "perly.y"
{ yyval.opval = newSTATEOP(0, yyvsp[-1].pval, yyvsp[0].opval); }
break;
case 12:
#line 192 "perly.y"
{ if (yyvsp[-1].pval != Nullch) {
			      yyval.opval = newSTATEOP(0, yyvsp[-1].pval, newOP(OP_NULL, 0));
			    }
			    else {
			      yyval.opval = Nullop;
			      PL_copline = NOLINE;
			    }
			    PL_expect = XSTATE; }
break;
case 13:
#line 201 "perly.y"
{ yyval.opval = newSTATEOP(0, yyvsp[-2].pval, yyvsp[-1].opval);
			  PL_expect = XSTATE; }
break;
case 14:
#line 207 "perly.y"
{ yyval.opval = Nullop; }
break;
case 15:
#line 209 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 16:
#line 211 "perly.y"
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[0].opval, yyvsp[-2].opval); }
break;
case 17:
#line 213 "perly.y"
{ yyval.opval = newLOGOP(OP_OR, 0, yyvsp[0].opval, yyvsp[-2].opval); }
break;
case 18:
#line 215 "perly.y"
{ yyval.opval = newLOOPOP(OPf_PARENS, 1, scalar(yyvsp[0].opval), yyvsp[-2].opval); }
break;
case 19:
#line 217 "perly.y"
{ yyval.opval = newLOOPOP(OPf_PARENS, 1, yyvsp[0].opval, yyvsp[-2].opval);}
break;
case 20:
#line 219 "perly.y"
{ yyval.opval = newFOROP(0, Nullch, (line_t)yyvsp[-1].ival,
					Nullop, yyvsp[0].opval, yyvsp[-2].opval, Nullop); }
break;
case 21:
#line 225 "perly.y"
{ yyval.opval = Nullop; }
break;
case 22:
#line 227 "perly.y"
{ (yyvsp[0].opval)->op_flags |= OPf_PARENS; yyval.opval = scope(yyvsp[0].opval); }
break;
case 23:
#line 229 "perly.y"
{ PL_copline = (line_t)yyvsp[-5].ival;
			    yyval.opval = newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval);
			    PL_hints |= HINT_BLOCK_SCOPE; }
break;
case 24:
#line 236 "perly.y"
{ PL_copline = (line_t)yyvsp[-6].ival;
			    yyval.opval = block_end(yyvsp[-4].ival,
				   newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval)); }
break;
case 25:
#line 240 "perly.y"
{ PL_copline = (line_t)yyvsp[-6].ival;
			    yyval.opval = block_end(yyvsp[-4].ival,
				   newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval)); }
break;
case 26:
#line 247 "perly.y"
{ yyval.opval = Nullop; }
break;
case 27:
#line 249 "perly.y"
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 28:
#line 254 "perly.y"
{ PL_copline = (line_t)yyvsp[-7].ival;
			    yyval.opval = block_end(yyvsp[-5].ival,
				   newSTATEOP(0, yyvsp[-8].pval,
				     newWHILEOP8(0, 1, (LOOP*)Nullop,
						 yyvsp[-7].ival, yyvsp[-4].opval, yyvsp[-1].opval, yyvsp[0].opval, yyvsp[-2].ival))); }
break;
case 29:
#line 260 "perly.y"
{ PL_copline = (line_t)yyvsp[-7].ival;
			    yyval.opval = block_end(yyvsp[-5].ival,
				   newSTATEOP(0, yyvsp[-8].pval,
				     newWHILEOP8(0, 1, (LOOP*)Nullop,
						 yyvsp[-7].ival, yyvsp[-4].opval, yyvsp[-1].opval, yyvsp[0].opval, yyvsp[-2].ival))); }
break;
case 30:
#line 266 "perly.y"
{ yyval.opval = block_end(yyvsp[-6].ival,
				 newFOROP(0, yyvsp[-9].pval, (line_t)yyvsp[-8].ival, yyvsp[-5].opval, yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 31:
#line 269 "perly.y"
{ yyval.opval = block_end(yyvsp[-4].ival,
				 newFOROP(0, yyvsp[-8].pval, (line_t)yyvsp[-7].ival, mod(yyvsp[-6].opval, OP_ENTERLOOP),
					  yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 32:
#line 273 "perly.y"
{ yyval.opval = block_end(yyvsp[-4].ival,
				 newFOROP(0, yyvsp[-7].pval, (line_t)yyvsp[-6].ival, Nullop, yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 33:
#line 278 "perly.y"
{ OP *forop;
			  PL_copline = (line_t)yyvsp[-10].ival;
			  forop = newSTATEOP(0, yyvsp[-11].pval,
					    newWHILEOP8(0, 1, (LOOP*)Nullop,
						yyvsp[-10].ival, scalar(yyvsp[-5].opval),
						yyvsp[0].opval, yyvsp[-2].opval, yyvsp[-3].ival));
			  if (yyvsp[-7].opval) {
				forop = append_elem(OP_LINESEQ,
                                        newSTATEOP(0, (yyvsp[-11].pval?savepv(yyvsp[-11].pval):Nullch),
						   yyvsp[-7].opval),
					forop);
			  }

			  yyval.opval = block_end(yyvsp[-8].ival, forop); }
break;
case 34:
#line 293 "perly.y"
{ yyval.opval = newSTATEOP(0, yyvsp[-2].pval,
				 newWHILEOP8(0, 1, (LOOP*)Nullop,
					     NOLINE, Nullop, yyvsp[-1].opval, yyvsp[0].opval, 0)); }
break;
case 35:
#line 300 "perly.y"
{ yyval.ival = (PL_min_intro_pending &&
			    PL_max_intro_pending >=  PL_min_intro_pending);
			  intro_my(); }
break;
case 36:
#line 306 "perly.y"
{ yyval.opval = Nullop; }
break;
case 38:
#line 312 "perly.y"
{ (void)scan_num("1", &yylval); yyval.opval = yylval.opval; }
break;
case 40:
#line 318 "perly.y"
{ yyval.opval = invert(scalar(yyvsp[0].opval)); }
break;
case 41:
#line 323 "perly.y"
{ yyval.opval = yyvsp[0].opval; intro_my(); }
break;
case 42:
#line 327 "perly.y"
{ yyval.opval = yyvsp[0].opval; intro_my(); }
break;
case 43:
#line 331 "perly.y"
{ yyval.opval = yyvsp[0].opval; intro_my(); }
break;
case 44:
#line 336 "perly.y"
{ yyval.pval = Nullch; }
break;
case 46:
#line 342 "perly.y"
{ yyval.ival = 0; }
break;
case 47:
#line 344 "perly.y"
{ yyval.ival = 0; }
break;
case 48:
#line 346 "perly.y"
{ yyval.ival = 0; }
break;
case 49:
#line 348 "perly.y"
{ yyval.ival = 0; }
break;
case 50:
#line 350 "perly.y"
{ yyval.ival = 0; }
break;
case 51:
#line 354 "perly.y"
{ newFORM(yyvsp[-2].ival, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 52:
#line 357 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 53:
#line 358 "perly.y"
{ yyval.opval = Nullop; }
break;
case 54:
#line 363 "perly.y"
{ newMYSUB(yyvsp[-4].ival, yyvsp[-3].opval, yyvsp[-2].opval, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 55:
#line 368 "perly.y"
{ newATTRSUB(yyvsp[-4].ival, yyvsp[-3].opval, yyvsp[-2].opval, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 56:
#line 372 "perly.y"
{ yyval.ival = start_subparse(FALSE, 0); }
break;
case 57:
#line 376 "perly.y"
{ yyval.ival = start_subparse(FALSE, CVf_ANON); }
break;
case 58:
#line 380 "perly.y"
{ yyval.ival = start_subparse(TRUE, 0); }
break;
case 59:
#line 384 "perly.y"
{ STRLEN n_a; char *name = SvPV(((SVOP*)yyvsp[0].opval)->op_sv,n_a);
			  if (strEQ(name, "BEGIN") || strEQ(name, "END")
			      || strEQ(name, "INIT") || strEQ(name, "CHECK"))
			      CvSPECIAL_on(PL_compcv);
			  yyval.opval = yyvsp[0].opval; }
break;
case 60:
#line 393 "perly.y"
{ yyval.opval = Nullop; }
break;
case 62:
#line 399 "perly.y"
{ yyval.opval = Nullop; }
break;
case 63:
#line 401 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 64:
#line 403 "perly.y"
{ yyval.opval = Nullop; }
break;
case 65:
#line 408 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 66:
#line 410 "perly.y"
{ yyval.opval = Nullop; }
break;
case 67:
#line 414 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 68:
#line 415 "perly.y"
{ yyval.opval = Nullop; PL_expect = XSTATE; }
break;
case 69:
#line 419 "perly.y"
{ package(yyvsp[-1].opval); }
break;
case 70:
#line 421 "perly.y"
{ package(Nullop); }
break;
case 71:
#line 425 "perly.y"
{ CvSPECIAL_on(PL_compcv); /* It's a BEGIN {} */ }
break;
case 72:
#line 427 "perly.y"
{ utilize(yyvsp[-6].ival, yyvsp[-5].ival, yyvsp[-3].opval, yyvsp[-2].opval, yyvsp[-1].opval); }
break;
case 73:
#line 432 "perly.y"
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 74:
#line 434 "perly.y"
{ yyval.opval = newLOGOP(yyvsp[-1].ival, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 75:
#line 436 "perly.y"
{ yyval.opval = newLOGOP(OP_DOR, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 77:
#line 442 "perly.y"
{ yyval.opval = yyvsp[-1].opval; }
break;
case 78:
#line 444 "perly.y"
{ yyval.opval = append_elem(OP_LIST, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 80:
#line 450 "perly.y"
{ yyval.opval = convert(yyvsp[-2].ival, OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(yyvsp[-2].ival,yyvsp[-1].opval), yyvsp[0].opval) ); }
break;
case 81:
#line 453 "perly.y"
{ yyval.opval = convert(yyvsp[-4].ival, OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(yyvsp[-4].ival,yyvsp[-2].opval), yyvsp[-1].opval) ); }
break;
case 82:
#line 456 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, scalar(yyvsp[-5].opval), yyvsp[-1].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[-3].opval))); }
break;
case 83:
#line 461 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST, scalar(yyvsp[-2].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[0].opval))); }
break;
case 84:
#line 465 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, yyvsp[-1].opval, yyvsp[0].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[-2].opval))); }
break;
case 85:
#line 470 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, yyvsp[-3].opval, yyvsp[-1].opval),
				    newUNOP(OP_METHOD, 0, yyvsp[-4].opval))); }
break;
case 86:
#line 475 "perly.y"
{ yyval.opval = convert(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 87:
#line 477 "perly.y"
{ yyval.opval = convert(yyvsp[-3].ival, 0, yyvsp[-1].opval); }
break;
case 88:
#line 479 "perly.y"
{ yyvsp[0].opval = newANONATTRSUB(yyvsp[-1].ival, 0, Nullop, yyvsp[0].opval); }
break;
case 89:
#line 481 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				 append_elem(OP_LIST,
				   prepend_elem(OP_LIST, yyvsp[-2].opval, yyvsp[0].opval), yyvsp[-4].opval)); }
break;
case 92:
#line 495 "perly.y"
{ yyval.opval = newBINOP(OP_GELEM, 0, yyvsp[-4].opval, scalar(yyvsp[-2].opval));
			    PL_expect = XOPERATOR; }
break;
case 93:
#line 498 "perly.y"
{ yyval.opval = newBINOP(OP_AELEM, 0, oopsAV(yyvsp[-3].opval), scalar(yyvsp[-1].opval)); }
break;
case 94:
#line 500 "perly.y"
{ yyval.opval = newBINOP(OP_AELEM, 0,
					ref(newAVREF(yyvsp[-4].opval),OP_RV2AV),
					scalar(yyvsp[-1].opval));}
break;
case 95:
#line 504 "perly.y"
{ yyval.opval = newBINOP(OP_AELEM, 0,
					ref(newAVREF(yyvsp[-3].opval),OP_RV2AV),
					scalar(yyvsp[-1].opval));}
break;
case 96:
#line 508 "perly.y"
{ yyval.opval = newBINOP(OP_HELEM, 0, oopsHV(yyvsp[-4].opval), jmaybe(yyvsp[-2].opval));
			    PL_expect = XOPERATOR; }
break;
case 97:
#line 511 "perly.y"
{ yyval.opval = newBINOP(OP_HELEM, 0,
					ref(newHVREF(yyvsp[-5].opval),OP_RV2HV),
					jmaybe(yyvsp[-2].opval));
			    PL_expect = XOPERATOR; }
break;
case 98:
#line 516 "perly.y"
{ yyval.opval = newBINOP(OP_HELEM, 0,
					ref(newHVREF(yyvsp[-4].opval),OP_RV2HV),
					jmaybe(yyvsp[-2].opval));
			    PL_expect = XOPERATOR; }
break;
case 99:
#line 521 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar(yyvsp[-3].opval))); }
break;
case 100:
#line 524 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, yyvsp[-1].opval,
				       newCVREF(0, scalar(yyvsp[-4].opval)))); }
break;
case 101:
#line 529 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   append_elem(OP_LIST, yyvsp[-1].opval,
					       newCVREF(0, scalar(yyvsp[-3].opval)))); }
break;
case 102:
#line 533 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				   newCVREF(0, scalar(yyvsp[-2].opval))); }
break;
case 103:
#line 539 "perly.y"
{ yyval.opval = newASSIGNOP(OPf_STACKED, yyvsp[-2].opval, yyvsp[-1].ival, yyvsp[0].opval); }
break;
case 104:
#line 541 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 105:
#line 543 "perly.y"
{   if (yyvsp[-1].ival != OP_REPEAT)
				scalar(yyvsp[-2].opval);
			    yyval.opval = newBINOP(yyvsp[-1].ival, 0, yyvsp[-2].opval, scalar(yyvsp[0].opval)); }
break;
case 106:
#line 547 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 107:
#line 549 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 108:
#line 551 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 109:
#line 553 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 110:
#line 555 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 111:
#line 557 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 112:
#line 559 "perly.y"
{ yyval.opval = newRANGE(yyvsp[-1].ival, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval));}
break;
case 113:
#line 561 "perly.y"
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 114:
#line 563 "perly.y"
{ yyval.opval = newLOGOP(OP_OR, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 115:
#line 565 "perly.y"
{ yyval.opval = newLOGOP(OP_DOR, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 116:
#line 567 "perly.y"
{ yyval.opval = bind_match(yyvsp[-1].ival, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 117:
#line 572 "perly.y"
{ yyval.opval = newUNOP(OP_NEGATE, 0, scalar(yyvsp[0].opval)); }
break;
case 118:
#line 574 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 119:
#line 576 "perly.y"
{ yyval.opval = newUNOP(OP_NOT, 0, scalar(yyvsp[0].opval)); }
break;
case 120:
#line 578 "perly.y"
{ yyval.opval = newUNOP(OP_COMPLEMENT, 0, scalar(yyvsp[0].opval));}
break;
case 121:
#line 580 "perly.y"
{ yyval.opval = newUNOP(OP_POSTINC, 0,
					mod(scalar(yyvsp[-1].opval), OP_POSTINC)); }
break;
case 122:
#line 583 "perly.y"
{ yyval.opval = newUNOP(OP_POSTDEC, 0,
					mod(scalar(yyvsp[-1].opval), OP_POSTDEC)); }
break;
case 123:
#line 586 "perly.y"
{ yyval.opval = newUNOP(OP_PREINC, 0,
					mod(scalar(yyvsp[0].opval), OP_PREINC)); }
break;
case 124:
#line 589 "perly.y"
{ yyval.opval = newUNOP(OP_PREDEC, 0,
					mod(scalar(yyvsp[0].opval), OP_PREDEC)); }
break;
case 125:
#line 596 "perly.y"
{ yyval.opval = newANONLIST(yyvsp[-1].opval); }
break;
case 126:
#line 598 "perly.y"
{ yyval.opval = newANONLIST(Nullop); }
break;
case 127:
#line 600 "perly.y"
{ yyval.opval = newANONHASH(yyvsp[-2].opval); }
break;
case 128:
#line 602 "perly.y"
{ yyval.opval = newANONHASH(Nullop); }
break;
case 129:
#line 604 "perly.y"
{ yyval.opval = newANONATTRSUB(yyvsp[-3].ival, yyvsp[-2].opval, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 130:
#line 610 "perly.y"
{ yyval.opval = dofile2(yyvsp[0].opval, yyvsp[-1].ival); }
break;
case 131:
#line 612 "perly.y"
{ yyval.opval = newUNOP(OP_NULL, OPf_SPECIAL, scope(yyvsp[0].opval)); }
break;
case 132:
#line 614 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar(yyvsp[-2].opval)
				)),Nullop)); dep();}
break;
case 133:
#line 622 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB,
			    OPf_SPECIAL|OPf_STACKED,
			    append_elem(OP_LIST,
				yyvsp[-1].opval,
				scalar(newCVREF(
				    (OPpENTERSUB_AMPER<<8),
				    scalar(yyvsp[-3].opval)
				)))); dep();}
break;
case 134:
#line 631 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				scalar(newCVREF(0,scalar(yyvsp[-2].opval))), Nullop)); dep();}
break;
case 135:
#line 635 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    prepend_elem(OP_LIST,
				yyvsp[-1].opval,
				scalar(newCVREF(0,scalar(yyvsp[-3].opval))))); dep();}
break;
case 140:
#line 647 "perly.y"
{ yyval.opval = newCONDOP(0, yyvsp[-4].opval, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 141:
#line 649 "perly.y"
{ yyval.opval = newUNOP(OP_REFGEN, 0, mod(yyvsp[0].opval,OP_REFGEN)); }
break;
case 142:
#line 651 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 143:
#line 653 "perly.y"
{ yyval.opval = localize(yyvsp[0].opval,yyvsp[-1].ival); }
break;
case 144:
#line 655 "perly.y"
{ yyval.opval = sawparens(yyvsp[-1].opval); }
break;
case 145:
#line 657 "perly.y"
{ yyval.opval = sawparens(newNULLLIST()); }
break;
case 146:
#line 659 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 147:
#line 661 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 148:
#line 663 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 149:
#line 665 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 150:
#line 667 "perly.y"
{ yyval.opval = newUNOP(OP_AV2ARYLEN, 0, ref(yyvsp[0].opval, OP_AV2ARYLEN));}
break;
case 151:
#line 669 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 152:
#line 671 "perly.y"
{ yyval.opval = newSLICEOP(0, yyvsp[-1].opval, yyvsp[-4].opval); }
break;
case 153:
#line 673 "perly.y"
{ yyval.opval = newSLICEOP(0, yyvsp[-1].opval, Nullop); }
break;
case 154:
#line 675 "perly.y"
{ yyval.opval = prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list(yyvsp[-1].opval),
					ref(yyvsp[-3].opval, OP_ASLICE))); }
break;
case 155:
#line 681 "perly.y"
{ yyval.opval = prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list(yyvsp[-2].opval),
					ref(oopsHV(yyvsp[-4].opval), OP_HSLICE)));
			    PL_expect = XOPERATOR; }
break;
case 156:
#line 688 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 157:
#line 690 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, 0, scalar(yyvsp[0].opval)); }
break;
case 158:
#line 692 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar(yyvsp[-2].opval)); }
break;
case 159:
#line 694 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, yyvsp[-1].opval, scalar(yyvsp[-3].opval))); }
break;
case 160:
#line 697 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, yyvsp[0].opval, scalar(yyvsp[-1].opval))); }
break;
case 161:
#line 700 "perly.y"
{ yyval.opval = newOP(yyvsp[0].ival, OPf_SPECIAL);
			    PL_hints |= HINT_BLOCK_SCOPE; }
break;
case 162:
#line 703 "perly.y"
{ yyval.opval = newLOOPEX(yyvsp[-1].ival,yyvsp[0].opval); }
break;
case 163:
#line 705 "perly.y"
{ yyval.opval = newUNOP(OP_NOT, 0, scalar(yyvsp[0].opval)); }
break;
case 164:
#line 707 "perly.y"
{ yyval.opval = newOP(yyvsp[0].ival, 0); }
break;
case 165:
#line 709 "perly.y"
{ yyval.opval = newUNOP(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 166:
#line 711 "perly.y"
{ yyval.opval = newUNOP(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 167:
#line 713 "perly.y"
{ yyval.opval = newOP(OP_REQUIRE, yyvsp[0].ival ? OPf_SPECIAL : 0); }
break;
case 168:
#line 715 "perly.y"
{ yyval.opval = newUNOP(OP_REQUIRE, yyvsp[-1].ival ? OPf_SPECIAL : 0, yyvsp[0].opval); }
break;
case 169:
#line 717 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    append_elem(OP_LIST, yyvsp[0].opval, scalar(yyvsp[-1].opval))); }
break;
case 170:
#line 720 "perly.y"
{ yyval.opval = newOP(yyvsp[0].ival, 0); }
break;
case 171:
#line 722 "perly.y"
{ yyval.opval = newOP(yyvsp[-2].ival, 0); }
break;
case 172:
#line 724 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
				scalar(yyvsp[0].opval)); }
break;
case 173:
#line 727 "perly.y"
{ yyval.opval = yyvsp[-2].ival == OP_NOT ? newUNOP(yyvsp[-2].ival, 0, newSVOP(OP_CONST, 0, newSViv(0)))
					    : newOP(yyvsp[-2].ival, OPf_SPECIAL); }
break;
case 174:
#line 730 "perly.y"
{ yyval.opval = newUNOP(yyvsp[-3].ival, 0, yyvsp[-1].opval); }
break;
case 175:
#line 732 "perly.y"
{ yyval.opval = pmruntime(yyvsp[-3].opval, yyvsp[-1].opval, Nullop); }
break;
case 176:
#line 734 "perly.y"
{ yyval.opval = pmruntime(yyvsp[-5].opval, yyvsp[-3].opval, yyvsp[-1].opval); }
break;
case 179:
#line 741 "perly.y"
{ yyval.opval = my_attrs(yyvsp[-1].opval,yyvsp[0].opval); }
break;
case 180:
#line 743 "perly.y"
{ yyval.opval = localize(yyvsp[0].opval,yyvsp[-1].ival); }
break;
case 181:
#line 748 "perly.y"
{ yyval.opval = sawparens(yyvsp[-1].opval); }
break;
case 182:
#line 750 "perly.y"
{ yyval.opval = sawparens(newNULLLIST()); }
break;
case 183:
#line 752 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 184:
#line 754 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 185:
#line 756 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 186:
#line 761 "perly.y"
{ yyval.opval = Nullop; }
break;
case 187:
#line 763 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 188:
#line 767 "perly.y"
{ yyval.opval = Nullop; }
break;
case 189:
#line 769 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 190:
#line 771 "perly.y"
{ yyval.opval = yyvsp[-1].opval; }
break;
case 191:
#line 777 "perly.y"
{ PL_in_my = 0; yyval.opval = my(yyvsp[0].opval); }
break;
case 192:
#line 781 "perly.y"
{ yyval.opval = newCVREF(yyvsp[-1].ival,yyvsp[0].opval); }
break;
case 193:
#line 785 "perly.y"
{ yyval.opval = newSVREF(yyvsp[0].opval); }
break;
case 194:
#line 789 "perly.y"
{ yyval.opval = newAVREF(yyvsp[0].opval); }
break;
case 195:
#line 793 "perly.y"
{ yyval.opval = newHVREF(yyvsp[0].opval); }
break;
case 196:
#line 797 "perly.y"
{ yyval.opval = newAVREF(yyvsp[0].opval); }
break;
case 197:
#line 801 "perly.y"
{ yyval.opval = newGVREF(0,yyvsp[0].opval); }
break;
case 198:
#line 806 "perly.y"
{ yyval.opval = scalar(yyvsp[0].opval); }
break;
case 199:
#line 808 "perly.y"
{ yyval.opval = scalar(yyvsp[0].opval);  }
break;
case 200:
#line 810 "perly.y"
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 201:
#line 813 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
#line 2536 "perly.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            PerlIO_printf(Perl_debug_log, "yydebug: after reduction, shifting from state 0 to\
 state %d\n", YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                PerlIO_printf(Perl_debug_log, "yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        PerlIO_printf(Perl_debug_log, "yydebug: after reduction, shifting from state %d \
to state %d\n", *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
	/*
	** reallocate and recover.  Note that pointers
	** have to be reset, or bad things will happen
	*/
	int yyps_index = (yyssp - yyss);
	int yypv_index = (yyvsp - yyvs);
	yystacksize += YYSTACKSIZE;
	ysave->yyvs = Renew(yyvs, yystacksize, YYSTYPE);
	ysave->yyss = Renew(yyss, yystacksize, short);
	if (!yyvs || !yyss)
        goto yyoverflow;
	yyssp = yyss + yyps_index;
	yyvsp = yyvs + yypv_index;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("Out of memory for yacc stack");
yyabort:
    retval = 1;
yyaccept:
#ifdef USE_ITHREADS
    LEAVE;			/* force yydestruct() before we return */
#endif
    return retval;
}

static void
yydestruct(pTHX_ void *ptr)
{
    struct ysv* ysave = (struct ysv*)ptr;
    if (ysave->yyss) Safefree(ysave->yyss);
    if (ysave->yyvs) Safefree(ysave->yyvs);
    yydebug	= ysave->oldyydebug;
    yynerrs	= ysave->oldyynerrs;
    yyerrflag	= ysave->oldyyerrflag;
    yychar	= ysave->oldyychar;
    yyval	= ysave->oldyyval;
    yylval	= ysave->oldyylval;
    Safefree(ysave);
}
