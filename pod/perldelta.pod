=encoding utf8

=head1 NAME

[ this is a template for a new perldelta file. Any text flagged as
XXX needs to be processed before release. ]

perldelta - what is new for perl v5.15.1

=head1 DESCRIPTION

This document describes differences between the 5.15.1 release and
the 5.15.0 release.

If you are upgrading from an earlier release such as 5.14.0, first read
L<perl5150delta>, which describes differences between 5.14.0 and
5.15.0.

=head1 Notice

XXX Any important notices here

=head1 Core Enhancements

XXX New core language features go here. Summarise user-visible core language
enhancements. Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

[ List each enhancement as a =head2 entry ]

=head2 Views

Views are almost-transparent references.  Using a view is almost like using
the view's target.  However, if a view is read-only (and most are), attempts
to modify the target through the view will fail.

This feature has been introduced to allow efficient and safe passing of
parameters by value.

=head2 C<splice()> doesn't warn when truncating

You can now limit the size of an array using C<splice(@a,MAX_LEN)> without
worrying about warnings.

=head2 The C<\$> prototype accepts any scalar lvalue

The C<\$> and C<\[$]> subroutine prototypes now accept any scalar lvalue
argument.  Previously they only accepted scalars beginning with C<$> and
hash and array elements.  This change makes them consistent with the way
the built-in C<read> and C<recv> functions (among others) parse their
arguments. This means that one can override the built-in functions with
custom subroutines that parse their arguments the same way.

=head2 You can now C<study> more than one string

The restriction that you can only have one C<study> active at a time has been
removed. You can now usefully C<study> as many strings as you want (until you
exhaust memory).

=head1 Security

XXX Any security-related notices go here.  In particular, any security
vulnerabilities closed should be noted here rather than in the
L</Selected Bug Fixes> section.

[ List each security issue as a =head2 entry ]

=head1 Incompatible Changes

XXX For a release on a stable branch, this section aspires to be:

    There are no changes intentionally incompatible with 5.XXX.XXX
    If any exist, they are bugs and reports are welcome.

[ List each incompatible change as a =head2 entry ]

=head1 Deprecations

XXX Any deprecated features, syntax, modules etc. should be listed here.
In particular, deprecated modules should be listed here even if they are
listed as an updated module in the L</Modules and Pragmata> section.

[ List each deprecation as a =head2 entry ]

=head1 Performance Enhancements

XXX Changes which enhance performance without changing behaviour go here. There
may well be none in a stable release.

[ List each enhancement as a =item entry ]

=over 4

=item *

The implementation of C<s///r> makes one fewer copy of the scalar's value.

=item *

If a studied scalar is C<split> with a regex, the engine will now take
advantage of the C<study> data.

=item *

C<study> now uses considerably less memory for shorter strings. Strings shorter
than 65535 characters use roughly half the memory than previously, strings
shorter than 255 characters use roughly one quarter of the memory.

=back

=head1 Modules and Pragmata

XXX All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/>
go here.  If Module::CoreList is updated, generate an initial draft of the
following sections using F<Porting/corelist-perldelta.pl>, which prints stub
entries to STDOUT.  Results can be pasted in place of the '=head2' entries
below.  A paragraph summary for important changes should then be added by hand.
In an ideal world, dual-life modules would have a F<Changes> file that could be
cribbed.

[ Within each section, list entries as a =item entry ]

=head2 New Modules and Pragmata

=over 4

=item *

XXX

=back

=head2 Updated Modules and Pragmata

=over 4

=item *

L<Compress::Raw::Bzip2> has been upgraded from version 2.035 to version 2.037

=item *

L<Compress::Raw::Zlib> has been upgraded from version 2.035 to version 2.037

Added offset parameter to CRC32

=item *

L<Compress::Zlib> has been upgraded from version 2.035 to version 2.037

IO::Compress::Zip and IO::Uncompress::Unzip now have support for LZMA (method 14).
There is a fix for a CRC issue in IO::Compress::Unzip and it supports Streamed
Stored context now. And fixed a Zip64 issue in
IO::Compress::Zip when the content size was exactly 0xFFFFFFFF.

=item *

L<IPC::Cmd> has been upgraded from version 0.70 to version 0.72

Capturing of command output (both C<STDOUT> and C<STDERR>) is now supported
using L<IPC::Open3> on MSWin32 without requiring L<IPC::Run>.

=item *

L<Locale::Codes> has been upgraded from version 3.16 to version 3.17

Added Language Extension codes (langext) and Language Variation codes
(langvar) as defined in the IANA language registry.

Added language codes from ISO 639-5

Added language/script codes from the IANA language subtag
registry

Fixed an uninitialized value warning.  RT 67438

Fixed the return value for the all_XXX_codes and all_XXX_names functions.  RT 69100

Reorganized modules to move Locale::MODULE to Locale::Codes::MODULE to
allow for cleaner future additions.  The original four modules (Locale::Language,
Locale::Currency, Locale::Country, Locale::Script) will continue to work, but
all new sets of codes will be added in the Locale::Codes namespace.

=item *

L<attributes> has been upgraded from version 0.14 to 0.15, as part of the
lvalue attribute warnings fix.  See L</Selected Bug Fixes>, below.

=item *

L<Math::BigInt::FastCalc> has been upgraded from version 0.28 to version 0.29.

The XS code is now compiled with C<PERL_NO_GET_CONTEXT>, which will aid
performance under ithreads.

=back

=head2 Removed Modules and Pragmata

=over 4

=item *

XXX

=back

=head1 Documentation

XXX Changes to files in F<pod/> go here.  Consider grouping entries by
file and be sure to link to the appropriate page, e.g. L<perlfunc>.

=head2 New Documentation

XXX Changes which create B<new> files in F<pod/> go here.

=head3 L<XXX>

XXX Description of the purpose of the new file here

=head2 Changes to Existing Documentation

XXX Changes which significantly change existing files in F<pod/> go here.
However, any changes to F<pod/perldiag.pod> should go in the L</Diagnostics>
section.

=head3 L<XXX>

=over 4

=item *

XXX Description of the change here

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

XXX New or changed warnings emitted by the core's C<C> code go here. Also
include any changes in L<perldiag> that reconcile it to the C<C> code.

[ Within each section, list entries as a =item entry that links to perldiag,
  e.g.

  =item *

  L<Invalid version object|perldiag/"Invalid version object">
]

=head2 New Diagnostics

XXX Newly added diagnostic messages go here

=head3 New Errors

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head3 New Warnings

=over 4

=item *

XXX L<message|perldiag/"message">

=back

=head2 Changes to Existing Diagnostics

XXX Changes (i.e. rewording) of diagnostic messages go here

=over 4

=item *

XXX Describe change here

=back

=head1 Utility Changes

XXX Changes to installed programs such as F<perlbug> and F<xsubpp> go
here. Most of these are built within the directories F<utils> and F<x2p>.

[ List utility changes as a =head3 entry for each utility and =item
entries for each change
Use L<XXX> with program names to get proper documentation linking. ]

=head3 L<XXX>

=over 4

=item *

XXX

=back

=head1 Configuration and Compilation

XXX Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.  Any other changes to the Perl build process should be listed here.
However, any platform-specific changes should be listed in the
L</Platform Support> section, instead.

[ List changes as a =item entry ].

=over 4

=item *

XXX

=back

=head1 Testing

XXX Any significant changes to the testing of a freshly built perl should be
listed here.  Changes which create B<new> files in F<t/> go here as do any
large changes to the testing harness (e.g. when parallel testing was added).
Changes to existing files in F<t/> aren't worth summarising, although the bugs
that they represent may be covered elsewhere.

[ List each test improvement as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Platform Support

XXX Any changes to platform support should be listed in the sections below.

[ Within the sections, list each platform as a =item entry with specific
changes as paragraphs below it. ]

=head2 New Platforms

XXX List any platforms that this version of perl compiles on, that previous
versions did not. These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Discontinued Platforms

XXX List any platforms that this version of perl no longer compiles on.

=over 4

=item XXX-some-platform

XXX

=back

=head2 Platform-Specific Notes

XXX List any changes for specific platforms. This could include configuration
and compilation changes or changes in portability/compatibility.  However,
changes within modules for platforms should generally be listed in the
L</Modules and Pragmata> section.

=over 4

=item XXX-some-platform

XXX

=back

=head1 Internal Changes

XXX Changes which affect the interface available to C<XS> code go here.
Other significant internal changes for future core maintainers should
be noted as well.

[ List each change as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Selected Bug Fixes

XXX Important bug fixes in the core language are summarised here.
Bug fixes in files in F<ext/> and F<lib/> are best summarised in
L</Modules and Pragmata>.

[ List each fix as a =item entry ]

=over 4

=item *

Applying the :lvalue attribute to subroutine that is already defined does
not work properly, as the attribute changes the way the sub is compiled.
Hence, Perl 5.12 began warning when an attempt is made to apply the
attribute to an already defined sub.  In such cases, the attribute is
discarded.

But the change in 5.12 missed the case where custom attributes are also
present: that case still silently and ineffectively applied the attribute.
That omission has now been corrected.  C<sub foo :lvalue :Whatever> (when
C<foo> is already defined) now warns about the :lvalue attribute, and does
not apply it.

L<attributes.pm|attributes> has likewise been updated to warn and not apply
the attribute.

=item *

=for comment
Not necessary for perl5160delta

The remaining discrepancies between explicit and implicit return from
lvalue subroutines have been resolved.  They mainly involved which error
message to display when a read-only value is returned in lvalue context.
Also, returning a PADTMP (the result of most built-ins, like C<index>) in
lvalue context is now forbidden for explicit return, as it always has been
for implicit return.  This is not a regression from 5.14, as all the cases
in which it could happen where previously syntax errors.

=item *

=for comment
Not necessary for perl5160delta

Explicitly returning a tied C<my> variable from an lvalue subroutine in
list lvalue context used to clear the variable before the assignment could
happen.  This is something that was missed when explicit return was made to
work in 5.15.0.

=item *

=for comment
Not necessary for perl5160delta

A minor memory leak, introduced in 5.15.0, has been fixed.  It would occur
when a hash is freed that has had its current iterator deleted
[perl #93454].

=back

=head API Changes

=head2 New type SVt_VIEW for views; replaces SVt_BIND

A new type C<SVt_VIEW> has been added in support of L<views>.  This type is
a renaming of C<SVt_BIND>.  Because the name C<SVt_BIND> was never given any
semantic nor could ever be created or destroyed, it has been removed.

=head2 Most API macros and functions follow views

For backward compatibility and convenience, most Perl API macros and
functions follow views transparently; e.g. if C<sv> is a view, then
C<SvTYPE(sv)> is not C<SVt_VIEW>, but the type of the view's target.

=head2 View-aware features added to API

New macros and functions have been added to support examination of views,
e.g. C<SvVTYPE(sv)> of a view is C<SVt_VIEW>.

=head1 Known Problems

XXX Descriptions of platform agnostic bugs we know we can't fix go here. Any
tests that had to be C<TODO>ed for the release would be noted here, unless
they were specific to a particular platform (see below).

This is a list of some significant unfixed bugs, which are regressions
from either 5.XXX.XXX or 5.XXX.XXX.

[ List each fix as a =item entry ]

=over 4

=item *

XXX

=back

=head1 Obituary

XXX If any significant core contributor has died, we've added a short obituary
here.

=head1 Acknowledgements

XXX The list of people to thank goes here.

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5-security-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes
all the core committers, who will be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
