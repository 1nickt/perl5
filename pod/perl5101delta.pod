=head1 NAME

perldelta - what is new for perl v5.10.1

=head1 DESCRIPTION

This document describes differences between the 5.10.0 release and
the 5.10.1 release.

If you are upgrading from an earlier release such as 5.8.8, first read
the L<perl5100delta>, which describes differences between 5.8.8 and
5.10.0

=head1 Incompatible Changes

=head2 Switch statement changes

The handling of complex expressions by the C<given>/C<when> switch
statement has been enhanced. There are two new cases where C<when> now
interprets its argument as a boolean, instead of an expression to be used
in a smart match:

=over 4

=item flip-flop operators

The C<..> and C<...> flip-flop operators are evaluated in boolean context,
following their usual semantics; see L<perlop/"Range Operators">.

=item defined-or operator

A compound expression involving the defined-or operator, as in
C<when (expr1 // expr2)>, will be treated as boolean if the first
expression is boolean. (This just extends the existing rule that applies
to the regular or operator, as in C<when (expr1 || expr2)>.)

=back

The next paragraph details more changes brought to the semantics to
the smart match operator, that naturally also modify the behaviour
of the switch statements where smart matching is implicitly used.

=head2 Smart match changes

=head3 Changes to type-based dispatch

The smart match operator C<~~> is no longer commutative. The behaviour of
a smart match now depends primarily on the type of its right hand
argument. Moreover, its semantics has been adjusted for greater
consistency or usefulness in several cases. While the general backwards
compatibility is maintained, several changes must be noted:

=over 4

=item *

Code references with an empty prototype are no longer treated specially.
They are passed an argument like the other code references (even if they
choose to ignore it).

=item *

C<%hash ~~ sub {}> and C<@array ~~ sub {}> now test that the subroutine
returns a true value for each key of the hash (or element of the
array), instead of passing the whole hash or array as a reference to
the subroutine.

=item *

Due to the commutativity breakage, code references are no longer
treated specially when appearing on the left of the C<~~> operator,
but like any vulgar scalar.

=item *

C<undef ~~ %hash> is always false (since C<undef> can't be a key in a
hash). No implicit conversion to C<""> is done (as was the case in perl
5.10.0).

=item *

C<$scalar ~~ @array> now always distributes the smart match across the
elements of the array. It's true if one element in @array verifies
C<$scalar ~~ $element>. This is a generalization of the old behaviour
that tested whether the array contained the scalar.

=back

The full dispatch table for the smart match operator is given in
L<perlsyn/"Smart matching in detail">.

=head3 Smart match and overloading

According to the rule of dispatch based on the rightmost argument type,
when an object overloading C<~~> appears on the right side of the
operator, the overload routine will always be called (with a 3rd argument
set to a true value, see L<overload>.) However, when the object will
appear on the left, the overload routine will be called only when the
rightmost argument is a simple scalar. This way distributivity of smart match
across arrays is not broken, as well as the other behaviours with complex
types (coderefs, hashes, regexes). Thus, writers of overloading routines
for smart match mostly need to worry only with comparing against a scalar,
and possibly with stringification overloading; the other common cases
will be automatically handled consistently.

C<~~> will now refuse to work on objects that do not overload it (in order
to avoid relying on the object's underlying structure).

=head2 Other incompatible changes

=over

=item *

The semantics of C<use feature :5.10*> have changed slightly.
See L<"Modules and Pragmata"> for more information.

=item *

It is now a run-time error to use the smart match operator C<~~>
with an object that has no overload defined for it. (This way
C<~~> will not break encapsulation by matching against the
object's internal representation as a reference.)

=item *

The version control system used for the development of the perl
interpreter has been switched from Perforce to git.  This is mainly an
internal issue that only affects people actively working on the perl core;
but it may have minor external visibility, for example in some of details
of the output of C<perl -V>. See L<perlrepository> for more information.

=item *

The internal structure of the C<ext/> directory in the perl source has
been reorganised. In general, a module C<Foo::Bar> who's source was
stored under F<ext/Foo/Bar/> is now located under F<ext/Foo-Bar/>. Also,
some modules have been moved from F<lib/> to F<ext/>. This is purely a
source tarball change, and should make no difference to the compilation or
installation of perl, unless you have a very customised build process that
explicitly relies on this structure, or which hard-codes the C<nonxs_ext>
F<Configure> parameter. Specifically, this change does not by default
alter the location of any files in the final installation.

=item *

As part of the C<Test::Harness> 2.x to 3.x upgrade, the experimental
C<Test::Harness::Straps> module has been removed. See 
See L</"Updated Modules"> for more details.

=item *

This one is actually a change introduced in 5.10.0, but it was missed
from that release's perldelta, so it is mentioned here instead.

A bugfix related to the handling of the C</m> modifier and C<qr> resulted
in a change of behaviour between 5.8.x and 5.10.0:

    # matches in 5.8.x, doesn't match in 5.10.0
    $re = qr/^bar/; "foo\nbar" =~ /$re/m;

=back

=head1 Core Enhancements

=head2 Unicode Character Database 5.1.0

The copy of the Unicode Character Database included in Perl 5.10.1 has
been updated to 5.1.0 from 5.0.0. See
L<http://www.unicode.org/versions/Unicode5.1.0/#NotableChanges> for the
notable changes.

=head2 A proper interface for pluggable Method Resolution Orders

XXX Nicholas said he needs to document the following change, at which
point update this entry (b2685f0c86 2008/12/27)

=head2 The C<overloading> pragma

This pragma allows you to lexically disable or enable overloading
for some or all operations. (Yuval Kogman)

XXX do we now have dtrace?

=head1 Modules and Pragmata

=head2 Pragmata Changes

=over 4

=item C<charnames>

The Unicode NameAliases.txt database file has been added. This has the
effect of adding some extra C<\N> character names that formerly wouldn't
have been recognised; for example, C<"\N{LATIN CAPITAL LETTER GHA}">.

=item C<overloading>

See L</"The C<overloading> pragma"> above.

=back

=head2 New Modules

=over

=item *

C<autodie> is a new lexically-scoped alternative for the C<Fatal> module.
The bundled version is 1.999.

=item *

C<Compress::Raw::Bzip2> has been added to the core (version 2.020).

=item *

C<Parse::CPAN::Meta> has been added to the core (version 1.39).

=back

=head2 Updated Modules

=over

=item *

C<feature>

The meaning of the C<:5.10> and C<:5.10.X> feature bundles has
changed slightly. The last component, if any (ie C<X>) is simply ignored.
This is predicated on the assumption that new features will not, in
general, be added to maintenance releases. So  C<:5.10> and C<:5.10.X>
have identical effect. This is a change to the behaviour documented for
5.10.0.

=item *

C<Attribute::Handlers> upgraded from version 0.79 to 0.85

=item *

C<Archive::Extract> upgraded from version 0.24 to 0.32

=item *

C<Archive::Tar> upgraded from version 1.38 to 1.52

=item *

C<Autoloader> upgraded from version 5.63 to 5.68

=item *

C<B> upgraded from version 1.17 to 1.22

=item *

C<B::Deparse> upgraded from version 0.83 to 0.87

=item *

C<CGI> upgraded from version 3.29 to 1.93_03 

=item *

C<Compress::Zlib> upgraded from version 2.008 to 2.020

=item *

C<CPAN> upgraded from version 1.9205 to 1.94

=item *

C<CPANPLUS> upgraded from version 0.84 to 0.8601

=item *

C<CPANPLUS::Dist::Build> upgraded from version 0.06_02 to 0.32

=item *

C<Cwd> upgraded from version 3.25_01 to 3.30

=item *

C<Data::Dumper> upgraded from version 2.121_14 to 2.124

=item *

C<Devel::PPPort> upgraded from version 3.13 to 3.19

=item *

C<DB_File> upgraded from version 1.816_1 to 1.820

=item *

C<Digest::MD5> upgraded from version 2.36_01 to 2.38

=item *

C<Dynaloader> XXX the "1.09" in 5.8.9 is probably different from that in
bleed/maint

=item *

C<Encode> upgraded from version 2.23 to 2.33

=item *

C<Filter::Simple> upgraded from version 0.82 to 0.84


=item *

C<FindBin> upgraded from version 1.49 to 1.50 

=item *

C<ExtUtils::Command> upgraded from version 1.13 to 1.16

=item *

C<ExtUtils::Constant> upgraded from 0.20 to 0.22 (note that neither of
these versions are available on CPAN).

=item *

C<ExtUtils::Install> upgraded from version 1.44 to 1.52

=item *

C<ExtUtils::MakeMaker> upgraded from version 6.42 to 6.50

=item *

C<ExtUtils::Manifest> upgraded from version 1.51_01 to 1.56

=item *

C<File::Copy> upgraded from version 2.11 to 2.14

=item *

C<File::Fetch> upgraded from version 0.14 to 0.18

=item *

C<File::Spec> upgraded from version 3.2501 to 3.30

=item *

C<FileCache> upgraded from version 1.07 to 1.08

=item *

C<Filter::Util::Call> upgraded from version 1.07 to 1.08

=item *

C<Fatal> upgraded from version 1.05 to 1.999. See also the new pragma
C<autodie>.

=item *

C<Getopt::Long> upgraded from version 2.37 to 2.38

=item *

C<Hash::Util::FieldHash> upgraded from version 1.03 to 1.03_01. XXX
This fixes a memory leak.

=item *

C<IO> upgraded from version 1.23_01 to 1.25

This makes non-blocking mode work on Windows in IO::Socket::INET [CPAN #43573].

=item *

C<IO::Dir> upgraded from version 1.06 to 1.07

=item *

C<IO::Handle> upgraded from version 1.27 to 1.28

=item *

C<IO::Socket> upgraded from version 1.30_01 to 1.31

=item *

C<IO::Compress::*> upgraded from version 2.008 to 2.020

=item *

C<IPC::Cmd> upgraded from version 0.40_1 to 0.46

=item *

C<IPC::Open3> upgraded from version 1.02 to 1.04

=item *

C<IPC::SysV> upgraded from version 1.05 to 2.01

=item *

C<lib> upgraded from version 0.5565 to 0.62

=item *

C<Log::Message> upgraded from version 0.01 to 0.02

=item *

C<Math::Complex> upgraded from version 1.37 to 1.56

=item *

C<Module::Build> upgraded from version 0.2808_01 to 0.32

=item *

C<Module::CoreList> upgraded from version 2.13 to 2.17_01 XXX

=item *

C<Module::Load> upgraded from version 0.12 to 0.16

=item *

C<Module::Load::Conditional> upgraded from version 0.22 to 0.30

=item *

C<Module::Loaded> upgraded from version 0.01 to 0.02

=item *

C<Module::Pluggable> upgraded from version 3.6 to 3.9_01 XXX

=item *

C<Net::Ping> upgraded from version 2.33 to 2.36

=item *

C<NEXT> upgraded from version 0.60_01 to 0.64

=item *

C<Package::Constants> upgraded from version 0.01 to 0.02

=item *

C<Pod::Parser> upgraded from version 1.35 to 1.37

=item *

C<Pod::MAN> upgraded from version 2.16 to 2.22

=item *

C<Pod::Text> upgraded from version 3.08 to 3.13

=item *

C<POSIX> upgraded from version 1.13 to 1.17

=item *

C<Storable> XXX the "2.19" in 5.8.9 is probably different from that in
bleed/maint

=item *

C<Switch> upgraded from version 2.13 to 2.14

=item *

C<Symbol> upgraded from version 1.06 to 1.07

=item *

C<threads> upgraded from version 1.67 to 1.72

=item *

C<threads::shared> upgraded from version 1.14 to 1.29

=item *

C<Term::ANSIColor> upgraded from version 1.12 to 2.00

=item *

C<Term::UI> upgraded from version 0.18 to 0.20

=item *

C<Test::Harness> upgraded from version 2.64 to 3.17
XXX major upgrade - add some blurb ???

Note that one side-effect of the 2.x to 3.x upgrade is that the
experimental C<Test::Harness::Straps> module (and its supporting
C<Assert>, C<Iterator>, C<Point> and C<Results> modules) have been
removed. If you still need this, then they are available in the
(unmaintained) C<Test-Harness-Straps> distribution on CPAN.

=item *

C<Test::Simple> upgraded from version 0.80 to 0.86_01 XXX not a CPAN release

=item *

C<Text::Tabs> upgraded from version 2007.1117 to 2009.0305

=item *

C<Text::Wrap> upgraded from version 2006.1117 to 2009.0305

=item *

C<Time::HiRes> upgraded from version 1.9711 to 1.9719

=item *

C<Time::Piece> upgraded from version 1.12 to 1.14

=item *

C<Unicode::Normalize> upgraded from version 1.02 to 1.03

=item *

C<Unicode::UCD> upgraded from version 0.25 to 0.27

=item *

C<Win32> upgraded from version 0.34 to version 0.39

=item *

C<Win32API::File> upgraded from version 0.1001_01 to 0.1101

=back

=head1 Utility Changes

=head2 F<h2ph>

Now looks in C<include-fixed> too, which is a recent addition to gcc's
search path.

=head2 F<h2xs>

No longer incorrectly treats enum values like macros.

Now handles C++ style constants (C<//>) properly in enums.

=head1 New Documentation

L<perlperf> by Richard Foley, provides an introduction to the use of
performance and optimization techniques which can be used with particular
reference to perl programs.

L<perlrepository> describes how to access the perl source using git.

=head1 Changes to Existing Documentation

The various large C<Changes*> files (which listed every change made to perl
over the last 18 years) have been removed, and replaced by a small file,
also called C<Changes>, which just explains how that same information may
be extracted from the git version control system.

The file F<Porting/patching.pod> has been deleted, as it mainly described
interacting with the old Perforce-based repository, which is now obsolete.
Information still relevant has been moved to L<perlrepository>.

L<perlapi>, L<perlintern>, L<perlmodlib> and L<perltoc> are now all generated
at build time, rather than being shipped as part of the release.

=head1 Performance Enhancements

=over

=item *

A new internal cache means that C<isa()> will often be faster.

=item *

Under C<use locale>, the locale-relevant information is now cached on read-only
values, such as the list returned by C<keys %hash>. This makes operations such
as <sort keys %hash> in the scope of C<use locale> much faster.

=back

=head1 Installation and Configuration Improvements

=head2 Configuration improvements

if C<vendorlib> and C<vendorarch> are the same, then they are only added to
C<@INC> once.

C<$Config{usedevel}> and the C-level C<PERL_USE_DEVEL> are now defined if
perl is built with  C<-Dusedevel>.

F<Configure> will enable use of C<-fstack-protector>, to provide protection
against stack-smashing attacks, if the compiler supports it.

F<Configure> will now determine the correct prototypes for re-entrant functions,
and for C<gconvert>, if you are using a C++ compiler rather than a C compiler.

XXX This description isn't quite right, is it? Yves?

On Unix, if you build from a git tree, the configuration process will
note the commit hash you have checked out, for display in the output of
C<perl -v> and C<perl -V>. Unpushed local commits are automatically added to
the list of local patches displayed by C<perl -V>

=head2 Compilation improvements

=head2 Installation improvements.

=head2 Platform Specific Changes

=head3 AIX

hints changes mean that AIX 4.2 should work again.

=head3 Cygwin

On Cygwin we now strip the last number from the DLL. This has been the
behaviour in the cygwin.com build for years. The hints files have been
updated.

=head3 FreeBSD

The hints files now identify the correct threading libraries on FreeBSD 7
and later.

=head3 Irix

We now work around a bizarre preprocessor bug in the Irix 6.5 compiler:
C<cc -E -> unfortunately goes into K&R mode, but C<cc -E file.c> doesn't.

=head3 Haiku

Patches from the Haiku maintainers have been merged in. Perl should now build
on Haiku.

=head3 MirOS BSD

Perl should now build on MirOS BSD.

=head3 NetBSD

hints now supports versions 5.*.

=head3 Stratus VOS

Various changes from Stratus have been merged in.

=head3 Win32

XXX: Don't know how to summarise
"Give Win32 message windows proper window procedures"
http://perl5.git.perl.org/perl.git/commit/099b16d3b50ccbb639491fa8bd48153ec3225450

Nor 33254: [PATCH] win32_async_check() doesn't loop enough.

=head3 VMS

Reads from C<PerlIO::Scalar>'s in-memory temporary files used to fail if C<$/>
was set to a numeric reference, to signal record-style reads. This is now fixed.

VMS now supports C<getgrgid>.

Many improvements and cleanups have been made to the VMS file name handling
and conversion code.

=for comment

I'd mention PERL_VMS_POSIX_EXIT but it doesn't seem to be documented anywhere.

=head1 Selected Bug Fixes

=over 4

=item *

5.10.0 inadvertently disabled an optimisation, causing a measurable performance
drop in list assignment, such as is often used to assign function parameters
from C<@_>. The optimisation has been re-instated, and the performance
regression fixed.

=back

=head2 Other fixes

=over

=item *

Fixed memory leak on C<while (1) { map 1, 1 }> [RT #53038].

=item *

Some potential coredumps in PerlIO fixed [RT #57322,54828].

=item *

The debugger now works with lvalue subroutines

=item *

The debugger's C<m> command was broken on modules that defined constants
[RT #61222].

=item *

C<crypt()> and string complement could return tainted values for untainted
arguments [RT #59998].

=item *

The C<-i.sufffix> command-line switch now recreates the file using
restricted permissions, before changing its mode to match the original
file. This eliminates a potential race condition. [RT #60904]

=item *

On some UNIX systems, the value in C<$?> would not have the top bit set
(C<$? & 128>) even if the child core dumped.

=item *

Under some circumstances, $^R could incorrectly become undefined
[RT #57042].

=item *

(XS) In various hash functions, passing a pre-computed hash to when the
key is utf8 might result in an incorrect lookup.

=item *

(XS) Including F<XSUB.h> before F<perl.h> gave a compile-time error
[RT #57176].

=item *

C<$object->isa('Foo')> would report false if the package C<Foo> didn't
exist, even if the object's C<@ISA> contained C<Foo>.

Various bugs in the new-to 5.10.0 mro code, triggered by manipulating C<@ISA>,
have been found and fixed.

=item *

Bitwise operations on references could crash the interpreter, e.g.
C<$x=\$y; $x |= "foo"> [RT #54956].

=item *

Patterns including alternation might be sensitive to the internal UTF8
representation, e.g.

    my $byte = chr(192);
    my $utf8 = chr(192); utf8::upgrade($utf8);
    $utf8 =~ /$byte|X}/i;	# failed in 5.10.0

=item *

Within utf8-encoded Perl source files (i.e. where C<use utf8> is in
effect), double-quoted literal strings could be corrupted where a C<\xNN>,
C<\0NNN> or C<\N{}> is followed by a literal character with ordinal value
greater than 255 [RT #59908].

=item *

C<B::Deparse> failed to correctly deparse various constructs:
C<readpipe STRING> [RT #62428], C<CORE::require(STRING)> [RT #62488],
C<sub foo(_)> [RT #62484]. Also, constant subroutines were deparsed as
their values.

=item *

Using C<setpgrp()> with no arguments could corrupt the perl stack.

=item *

The block form of C<eval> is now specifically trappable by C<Safe> and
C<ops>.  Previously it was erroneously treated like string C<eval>.

=item *

In 5.10.0, the two characters C<[~> were sometimes parsed as the smart
match operator (C<~~>) [RT #63854].

=item *

In 5.10.0, the C<*> quantifier in patterns was sometimes treated as
C<{0,32767}> [RT #60034, #60464]. For example, this match would fail:

    ("ab" x 32768) =~ /^(ab)*$/

=item *

C<shmget> was limited to a 32 bit segment size on a 64 bit OS [RT #63924].

=item *

Using C<next> or C<last> to exit a C<given> block no longer produces a
spurious warning like the following:

    Exiting given via last at foo.pl line 123

=item *

On windows, C<'.\foo'> and C<'..\foo'>  were treated differently than
C<'./foo'> and C<'../foo'> by C<do> and C<require> [RT #63492].

=item *

Assigning a format to a glob could corrupt the format; e.g.:

     *bar=*foo{FORMAT}; # foo format now bad

=item *

Attempting to coerce a typeglob to a string or number could cause an assertion
failure. The correct error message is now generated, "Can't coerce GLOB to
I<$type>".

=item *

Under C<use filetest 'access'> C<-x> was using the wrong access mode. This
has been fixed [RT #49003].

=item *

C<length> on a tied scalar that returned a Unicode value would not be correct
the first time. This has been fixed.

=item *

Using an array C<tie> inside in array C<tie> could SEGV. This has been fixed.
[RT #51636]

=item *

A race condition inside C<PerlIOStdio_close()> has been identified and fixed.
This used to cause various threading issues, including SEGVs.

=item *

In C<unpack>, C<()> groups in scalar context was internally placing a list on
the interpreter's stack, which manifested in various ways, including SEGVs.
This is now fixed. [RT #50256]

=item *

Magic was called twice in C<substr>, C<\&$x>, C<tie $x, $m> and C<chop>.
These have all been fixed.

=item *

An optimisation to clear the temporary stack within the implicit loop of
C<s///ge> has been reverted, as it turned out to be the cause of obscure
bugs in seemingly unrelated parts of the interpreter. [Change ef0d4e17921ee3de]

=item *

The line numbers for warnings inside C<elsif> are now correct.

=item *

The C<..> operator now works correctly with ranges whose ends are at or close
to the values of the smallest and largest integers.

=item *

C<binmode STDIN, ':raw'> could lead to segmentation faults on some platforms.
This has been fixed [RT #54828]

=item *

An off-by-one error meant that C<index $str, ...> was effectively being executed
as C<index "$str\0", ...>. This has been fixed [RT #53746]

=item *

Various leaks associated with named captures in regexs have been fixed.
[RT #57024]

=item *

A weak reference to a hash would leak. This was affecting C<DBI>. [RT #56908]

=back

=head1 New or Changed Diagnostics

=head2 panic: sv_chop %s

This new fatal error occurs when the C routine C<Perl_sv_chop()> was passed a
position that is not within the scalar's string buffer. This is caused by
buggy XS code, and at this point recovery is not possible.

=head2 Can't locate package %s for the parents of %s

This warning has been removed. In general, it only got produced in
conjunction with other warnings, and removing it allowed an isa lookup
optimisation to be added.

=head2 v-string in use/require is non-portable

This warning has been removed.

=item Deep recursion on subroutine "%s"

It is now possible to change the depth threshold for this warning from the
default of 100, by recompiling the F<perl> binary, setting the C pre-processor
macro C<PERL_SUB_DEPTH_WARN> to the desired value.

=head1 Changed Internals

=over

=item *

The J.R.R. Tolkien quotes at the head of C source file have been checked and
proper citations added, thanks to a patch from Tom Christiansen.

=item *

C<vcroak()> now accepts a null first argument. A full audit was made of
the "not NULL" compiler annotations, and those for several other internal
functions were corrected.

=item *

New macros C<dSAVEDERRNO>, C<dSAVE_ERRNO>, C<SAVE_ERRNO>, C<RESTORE_ERRNO>
have been added to formalise the temporary saving of the C<errno>
variable.

=item *

The function C<Perl_sv_insert_flags> has been added to augment
C<Perl_sv_insert>.

=item *

The function C<Perl_newSV_type(type)> has been added, equivalent to
C<Perl_newSV()> followed by C<Perl_sv_upgrade(type)>.

=item *

The function C<Perl_newSVpvn_flags()> has been added, equivalent to
C<Perl_newSVpvn()> and then performing the action relevant to the flag.

Two flag bits are currently supported

=over 4

=item C<SVf_UTF8>

This will call C<SvUTF8_on()> for you. (Note that this does not convert an
sequence of ISO 8859-1 characters to UTF-8). A wrapper, C<newSVpvn_utf8()> is
available for this.

=item C<SVs_TEMP>

Call C<sv_2mortal()> on the new SV.

=back

There is also a wrapper that takes constant strings, C<newSVpvs_flags()>.

=item *

The function C<Perl_croak_xs_usage> has been added as a wrapper to
C<Perl_croak>.

=item *

The functions C<PerlIO_find_layer> and C<PerlIO_list_alloc> are now
exported.

=item *

C<PL_na> has been exterminated from the core code, replaced by local STRLEN
temporaries, or C<*_nolen()> calls. Either approach is faster than C<PL_na>,
which is a pointer deference into the interpreter structure under ithreads,
and a global variable otherwise.

=item *

C<Perl_mg_free()> used to leave freed memory accessible via SvMAGIC() on the
scalar. It now updates the linked list to remove each piece of magic as it is
freed.

=item *

Under ithreads, the regex in C<PL_reg_curpm> is now reference counted. This
eliminates a lot of hackish work-arounds to cope with it not being reference
counted.

=item *

C<Perl_mg_magical()> would sometimes incorrectly turn on C<SvRMAGICAL()>
This has been fixed.

=item *

The B<public> IV and NV flags are now not set if the string value has trailing
"garbage". This behaviour is consistent with not setting the public IV or NV
flags if the value is out of range for the type.

=item *

SV allocation tracing has been added to the diagnostics enabled by C<-Dm>.
The tracing can alternatively output via the C<PERL_MEM_LOG> mechanism, if that
was enabled when the F<perl> binary was compiled.

=item *

Uses of C<Nullav>, C<Nullcv>, C<Nullhv>, C<Nullop>, C<Nullsv> etc have been
replaced by C<NULL> in the core code, and non-dual-life modules, as C<NULL>
is clearer to those unfamilar with the core code.

=item *

A macro C<MUTABLE_PTR(p)> has been added, which on (non-pedantic) gcc will not
cast away C<const>, returning a C<void *>. Macros C<MUTABLE_SV(av)>,
C<MUTABLE_SV(cv)> etc build on this, casting to C<AV *> etc without casting
away C<const>. This allows proper compile-time auditing of C<const> correctness
in the core, and helped picked up some errors (now fixed).

=item *

Macros C<mPUSHs()> and C<mXPUSHs()> have been added, for pushing SVs on the
stack and mortalizing them.

=item *

Use of the private structure C<mro_meta> has changed slightly. Nothing outside
the core should be accessing this directly anyway.

=back

=head1 Known Problems

=head2 Platform Specific Problems

=head1 Deprecations

The following items are now deprecated.

=over

=item *

C<Switch> is buggy and should be avoided. From perl 5.11.0 onwards it is
intended that any use of the core version of this module will emit a
warning, and that the module will eventually be removed from the core
(probably in perl 5.14.0). See L<perlsyn/"Switch statements"> for its
replacement.

=item *

C<suidperl> will be removed in 5.12.0. This provides a mechanism to
emulate setuid permission bits on systems that don't support it properly.

=back

=head1 Acknowledgements

Some of the work in this release was funded by a TPF grant.

XXX more to come

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://bugs.perl.org/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the B<perlbug>
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of C<perl -V>, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details
on what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut

XXX Don't know where to put a description of F<Porting/expand-macro.pl>
But I think it should get a mention.
